{"ast":null,"code":"// moment-hijri.js\n// author: Suhail Alkowaileet\n// This is a modified version of moment-jalaali by Behrang Noruzi Niya\n// license: MIT\n\n'use strict';\n\n/************************************\r\n    Expose Moment Hijri\r\n************************************/\n(function (root, factory) {\n  /* global define */\n  if (typeof define === 'function' && define.amd) {\n    define(['moment'], function (moment) {\n      root.moment = factory(moment);\n      return root.moment;\n    });\n  } else if (typeof exports === 'object') {\n    module.exports = factory(require('moment'));\n  } else {\n    root.moment = factory(root.moment);\n  }\n})(this, function (moment) {\n  // jshint ignore:line\n\n  if (moment == null) {\n    throw new Error('Cannot find moment');\n  }\n\n  /************************************\r\n       Constants\r\n   ************************************/\n\n  var ummalqura = {\n    ummalquraData: [28607, 28636, 28665, 28695, 28724, 28754, 28783, 28813, 28843, 28872, 28901, 28931, 28960, 28990, 29019, 29049, 29078, 29108, 29137, 29167, 29196, 29226, 29255, 29285, 29315, 29345, 29375, 29404, 29434, 29463, 29492, 29522, 29551, 29580, 29610, 29640, 29669, 29699, 29729, 29759, 29788, 29818, 29847, 29876, 29906, 29935, 29964, 29994, 30023, 30053, 30082, 30112, 30141, 30171, 30200, 30230, 30259, 30289, 30318, 30348, 30378, 30408, 30437, 30467, 30496, 30526, 30555, 30585, 30614, 30644, 30673, 30703, 30732, 30762, 30791, 30821, 30850, 30880, 30909, 30939, 30968, 30998, 31027, 31057, 31086, 31116, 31145, 31175, 31204, 31234, 31263, 31293, 31322, 31352, 31381, 31411, 31441, 31471, 31500, 31530, 31559, 31589, 31618, 31648, 31676, 31706, 31736, 31766, 31795, 31825, 31854, 31884, 31913, 31943, 31972, 32002, 32031, 32061, 32090, 32120, 32150, 32180, 32209, 32239, 32268, 32298, 32327, 32357, 32386, 32416, 32445, 32475, 32504, 32534, 32563, 32593, 32622, 32652, 32681, 32711, 32740, 32770, 32799, 32829, 32858, 32888, 32917, 32947, 32976, 33006, 33035, 33065, 33094, 33124, 33153, 33183, 33213, 33243, 33272, 33302, 33331, 33361, 33390, 33420, 33450, 33479, 33509, 33539, 33568, 33598, 33627, 33657, 33686, 33716, 33745, 33775, 33804, 33834, 33863, 33893, 33922, 33952, 33981, 34011, 34040, 34069, 34099, 34128, 34158, 34187, 34217, 34247, 34277, 34306, 34336, 34365, 34395, 34424, 34454, 34483, 34512, 34542, 34571, 34601, 34631, 34660, 34690, 34719, 34749, 34778, 34808, 34837, 34867, 34896, 34926, 34955, 34985, 35015, 35044, 35074, 35103, 35133, 35162, 35192, 35222, 35251, 35280, 35310, 35340, 35370, 35399, 35429, 35458, 35488, 35517, 35547, 35576, 35605, 35635, 35665, 35694, 35723, 35753, 35782, 35811, 35841, 35871, 35901, 35930, 35960, 35989, 36019, 36048, 36078, 36107, 36136, 36166, 36195, 36225, 36254, 36284, 36314, 36343, 36373, 36403, 36433, 36462, 36492, 36521, 36551, 36580, 36610, 36639, 36669, 36698, 36728, 36757, 36786, 36816, 36845, 36875, 36904, 36934, 36963, 36993, 37022, 37052, 37081, 37111, 37141, 37170, 37200, 37229, 37259, 37288, 37318, 37347, 37377, 37406, 37436, 37465, 37495, 37524, 37554, 37584, 37613, 37643, 37672, 37701, 37731, 37760, 37790, 37819, 37849, 37878, 37908, 37938, 37967, 37997, 38027, 38056, 38085, 38115, 38144, 38174, 38203, 38233, 38262, 38292, 38322, 38351, 38381, 38410, 38440, 38469, 38499, 38528, 38558, 38587, 38617, 38646, 38676, 38705, 38735, 38764, 38794, 38823, 38853, 38882, 38912, 38941, 38971, 39001, 39030, 39059, 39089, 39118, 39148, 39178, 39208, 39237, 39267, 39297, 39326, 39355, 39385, 39414, 39444, 39473, 39503, 39532, 39562, 39592, 39621, 39650, 39680, 39709, 39739, 39768, 39798, 39827, 39857, 39886, 39916, 39946, 39975, 40005, 40035, 40064, 40094, 40123, 40153, 40182, 40212, 40241, 40271, 40300, 40330, 40359, 40389, 40418, 40448, 40477, 40507, 40536, 40566, 40595, 40625, 40655, 40685, 40714, 40744, 40773, 40803, 40832, 40862, 40892, 40921, 40951, 40980, 41009, 41039, 41068, 41098, 41127, 41157, 41186, 41216, 41245, 41275, 41304, 41334, 41364, 41393, 41422, 41452, 41481, 41511, 41540, 41570, 41599, 41629, 41658, 41688, 41718, 41748, 41777, 41807, 41836, 41865, 41894, 41924, 41953, 41983, 42012, 42042, 42072, 42102, 42131, 42161, 42190, 42220, 42249, 42279, 42308, 42337, 42367, 42397, 42426, 42456, 42485, 42515, 42545, 42574, 42604, 42633, 42662, 42692, 42721, 42751, 42780, 42810, 42839, 42869, 42899, 42929, 42958, 42988, 43017, 43046, 43076, 43105, 43135, 43164, 43194, 43223, 43253, 43283, 43312, 43342, 43371, 43401, 43430, 43460, 43489, 43519, 43548, 43578, 43607, 43637, 43666, 43696, 43726, 43755, 43785, 43814, 43844, 43873, 43903, 43932, 43962, 43991, 44021, 44050, 44080, 44109, 44139, 44169, 44198, 44228, 44258, 44287, 44317, 44346, 44375, 44405, 44434, 44464, 44493, 44523, 44553, 44582, 44612, 44641, 44671, 44700, 44730, 44759, 44788, 44818, 44847, 44877, 44906, 44936, 44966, 44996, 45025, 45055, 45084, 45114, 45143, 45172, 45202, 45231, 45261, 45290, 45320, 45350, 45380, 45409, 45439, 45468, 45498, 45527, 45556, 45586, 45615, 45644, 45674, 45704, 45733, 45763, 45793, 45823, 45852, 45882, 45911, 45940, 45970, 45999, 46028, 46058, 46088, 46117, 46147, 46177, 46206, 46236, 46265, 46295, 46324, 46354, 46383, 46413, 46442, 46472, 46501, 46531, 46560, 46590, 46620, 46649, 46679, 46708, 46738, 46767, 46797, 46826, 46856, 46885, 46915, 46944, 46974, 47003, 47033, 47063, 47092, 47122, 47151, 47181, 47210, 47240, 47269, 47298, 47328, 47357, 47387, 47417, 47446, 47476, 47506, 47535, 47565, 47594, 47624, 47653, 47682, 47712, 47741, 47771, 47800, 47830, 47860, 47890, 47919, 47949, 47978, 48008, 48037, 48066, 48096, 48125, 48155, 48184, 48214, 48244, 48273, 48303, 48333, 48362, 48392, 48421, 48450, 48480, 48509, 48538, 48568, 48598, 48627, 48657, 48687, 48717, 48746, 48776, 48805, 48834, 48864, 48893, 48922, 48952, 48982, 49011, 49041, 49071, 49100, 49130, 49160, 49189, 49218, 49248, 49277, 49306, 49336, 49365, 49395, 49425, 49455, 49484, 49514, 49543, 49573, 49602, 49632, 49661, 49690, 49720, 49749, 49779, 49809, 49838, 49868, 49898, 49927, 49957, 49986, 50016, 50045, 50075, 50104, 50133, 50163, 50192, 50222, 50252, 50281, 50311, 50340, 50370, 50400, 50429, 50459, 50488, 50518, 50547, 50576, 50606, 50635, 50665, 50694, 50724, 50754, 50784, 50813, 50843, 50872, 50902, 50931, 50960, 50990, 51019, 51049, 51078, 51108, 51138, 51167, 51197, 51227, 51256, 51286, 51315, 51345, 51374, 51403, 51433, 51462, 51492, 51522, 51552, 51582, 51611, 51641, 51670, 51699, 51729, 51758, 51787, 51816, 51846, 51876, 51906, 51936, 51965, 51995, 52025, 52054, 52083, 52113, 52142, 52171, 52200, 52230, 52260, 52290, 52319, 52349, 52379, 52408, 52438, 52467, 52497, 52526, 52555, 52585, 52614, 52644, 52673, 52703, 52733, 52762, 52792, 52822, 52851, 52881, 52910, 52939, 52969, 52998, 53028, 53057, 53087, 53116, 53146, 53176, 53205, 53235, 53264, 53294, 53324, 53353, 53383, 53412, 53441, 53471, 53500, 53530, 53559, 53589, 53619, 53648, 53678, 53708, 53737, 53767, 53796, 53825, 53855, 53884, 53913, 53943, 53973, 54003, 54032, 54062, 54092, 54121, 54151, 54180, 54209, 54239, 54268, 54297, 54327, 54357, 54387, 54416, 54446, 54476, 54505, 54535, 54564, 54593, 54623, 54652, 54681, 54711, 54741, 54770, 54800, 54830, 54859, 54889, 54919, 54948, 54977, 55007, 55036, 55066, 55095, 55125, 55154, 55184, 55213, 55243, 55273, 55302, 55332, 55361, 55391, 55420, 55450, 55479, 55508, 55538, 55567, 55597, 55627, 55657, 55686, 55716, 55745, 55775, 55804, 55834, 55863, 55892, 55922, 55951, 55981, 56011, 56040, 56070, 56100, 56129, 56159, 56188, 56218, 56247, 56276, 56306, 56335, 56365, 56394, 56424, 56454, 56483, 56513, 56543, 56572, 56601, 56631, 56660, 56690, 56719, 56749, 56778, 56808, 56837, 56867, 56897, 56926, 56956, 56985, 57015, 57044, 57074, 57103, 57133, 57162, 57192, 57221, 57251, 57280, 57310, 57340, 57369, 57399, 57429, 57458, 57487, 57517, 57546, 57576, 57605, 57634, 57664, 57694, 57723, 57753, 57783, 57813, 57842, 57871, 57901, 57930, 57959, 57989, 58018, 58048, 58077, 58107, 58137, 58167, 58196, 58226, 58255, 58285, 58314, 58343, 58373, 58402, 58432, 58461, 58491, 58521, 58551, 58580, 58610, 58639, 58669, 58698, 58727, 58757, 58786, 58816, 58845, 58875, 58905, 58934, 58964, 58994, 59023, 59053, 59082, 59111, 59141, 59170, 59200, 59229, 59259, 59288, 59318, 59348, 59377, 59407, 59436, 59466, 59495, 59525, 59554, 59584, 59613, 59643, 59672, 59702, 59731, 59761, 59791, 59820, 59850, 59879, 59909, 59939, 59968, 59997, 60027, 60056, 60086, 60115, 60145, 60174, 60204, 60234, 60264, 60293, 60323, 60352, 60381, 60411, 60440, 60469, 60499, 60528, 60558, 60588, 60618, 60648, 60677, 60707, 60736, 60765, 60795, 60824, 60853, 60883, 60912, 60942, 60972, 61002, 61031, 61061, 61090, 61120, 61149, 61179, 61208, 61237, 61267, 61296, 61326, 61356, 61385, 61415, 61445, 61474, 61504, 61533, 61563, 61592, 61621, 61651, 61680, 61710, 61739, 61769, 61799, 61828, 61858, 61888, 61917, 61947, 61976, 62006, 62035, 62064, 62094, 62123, 62153, 62182, 62212, 62242, 62271, 62301, 62331, 62360, 62390, 62419, 62448, 62478, 62507, 62537, 62566, 62596, 62625, 62655, 62685, 62715, 62744, 62774, 62803, 62832, 62862, 62891, 62921, 62950, 62980, 63009, 63039, 63069, 63099, 63128, 63157, 63187, 63216, 63246, 63275, 63305, 63334, 63363, 63393, 63423, 63453, 63482, 63512, 63541, 63571, 63600, 63630, 63659, 63689, 63718, 63747, 63777, 63807, 63836, 63866, 63895, 63925, 63955, 63984, 64014, 64043, 64073, 64102, 64131, 64161, 64190, 64220, 64249, 64279, 64309, 64339, 64368, 64398, 64427, 64457, 64486, 64515, 64545, 64574, 64603, 64633, 64663, 64692, 64722, 64752, 64782, 64811, 64841, 64870, 64899, 64929, 64958, 64987, 65017, 65047, 65076, 65106, 65136, 65166, 65195, 65225, 65254, 65283, 65313, 65342, 65371, 65401, 65431, 65460, 65490, 65520, 65549, 65579, 65608, 65638, 65667, 65697, 65726, 65755, 65785, 65815, 65844, 65874, 65903, 65933, 65963, 65992, 66022, 66051, 66081, 66110, 66140, 66169, 66199, 66228, 66258, 66287, 66317, 66346, 66376, 66405, 66435, 66465, 66494, 66524, 66553, 66583, 66612, 66641, 66671, 66700, 66730, 66760, 66789, 66819, 66849, 66878, 66908, 66937, 66967, 66996, 67025, 67055, 67084, 67114, 67143, 67173, 67203, 67233, 67262, 67292, 67321, 67351, 67380, 67409, 67439, 67468, 67497, 67527, 67557, 67587, 67617, 67646, 67676, 67705, 67735, 67764, 67793, 67823, 67852, 67882, 67911, 67941, 67971, 68000, 68030, 68060, 68089, 68119, 68148, 68177, 68207, 68236, 68266, 68295, 68325, 68354, 68384, 68414, 68443, 68473, 68502, 68532, 68561, 68591, 68620, 68650, 68679, 68708, 68738, 68768, 68797, 68827, 68857, 68886, 68916, 68946, 68975, 69004, 69034, 69063, 69092, 69122, 69152, 69181, 69211, 69240, 69270, 69300, 69330, 69359, 69388, 69418, 69447, 69476, 69506, 69535, 69565, 69595, 69624, 69654, 69684, 69713, 69743, 69772, 69802, 69831, 69861, 69890, 69919, 69949, 69978, 70008, 70038, 70067, 70097, 70126, 70156, 70186, 70215, 70245, 70274, 70303, 70333, 70362, 70392, 70421, 70451, 70481, 70510, 70540, 70570, 70599, 70629, 70658, 70687, 70717, 70746, 70776, 70805, 70835, 70864, 70894, 70924, 70954, 70983, 71013, 71042, 71071, 71101, 71130, 71159, 71189, 71218, 71248, 71278, 71308, 71337, 71367, 71397, 71426, 71455, 71485, 71514, 71543, 71573, 71602, 71632, 71662, 71691, 71721, 71751, 71781, 71810, 71839, 71869, 71898, 71927, 71957, 71986, 72016, 72046, 72075, 72105, 72135, 72164, 72194, 72223, 72253, 72282, 72311, 72341, 72370, 72400, 72429, 72459, 72489, 72518, 72548, 72577, 72607, 72637, 72666, 72695, 72725, 72754, 72784, 72813, 72843, 72872, 72902, 72931, 72961, 72991, 73020, 73050, 73080, 73109, 73139, 73168, 73197, 73227, 73256, 73286, 73315, 73345, 73375, 73404, 73434, 73464, 73493, 73523, 73552, 73581, 73611, 73640, 73669, 73699, 73729, 73758, 73788, 73818, 73848, 73877, 73907, 73936, 73965, 73995, 74024, 74053, 74083, 74113, 74142, 74172, 74202, 74231, 74261, 74291, 74320, 74349, 74379, 74408, 74437, 74467, 74497, 74526, 74556, 74586, 74615, 74645, 74675, 74704, 74733, 74763, 74792, 74822, 74851, 74881, 74910, 74940, 74969, 74999, 75029, 75058, 75088, 75117, 75147, 75176, 75206, 75235, 75264, 75294, 75323, 75353, 75383, 75412, 75442, 75472, 75501, 75531, 75560, 75590, 75619, 75648, 75678, 75707, 75737, 75766, 75796, 75826, 75856, 75885, 75915, 75944, 75974, 76003, 76032, 76062, 76091, 76121, 76150, 76180, 76210, 76239, 76269, 76299, 76328, 76358, 76387, 76416, 76446, 76475, 76505, 76534, 76564, 76593, 76623, 76653, 76682, 76712, 76741, 76771, 76801, 76830, 76859, 76889, 76918, 76948, 76977, 77007, 77036, 77066, 77096, 77125, 77155, 77185, 77214, 77243, 77273, 77302, 77332, 77361, 77390, 77420, 77450, 77479, 77509, 77539, 77569, 77598, 77627, 77657, 77686, 77715, 77745, 77774, 77804, 77833, 77863, 77893, 77923, 77952, 77982, 78011, 78041, 78070, 78099, 78129, 78158, 78188, 78217, 78247, 78277, 78307, 78336, 78366, 78395, 78425, 78454, 78483, 78513, 78542, 78572, 78601, 78631, 78661, 78690, 78720, 78750, 78779, 78808, 78838, 78867, 78897, 78926, 78956, 78985, 79015, 79044, 79074, 79104, 79133, 79163, 79192, 79222, 79251, 79281, 79310, 79340, 79369, 79399, 79428, 79458, 79487, 79517, 79546, 79576, 79606, 79635, 79665, 79695, 79724, 79753, 79783, 79812, 79841, 79871, 79900, 79930, 79960, 79990]\n  };\n  var formattingTokens = /(\\[[^\\[]*\\])|(\\\\)?i(Mo|MM?M?M?|Do|DDDo|DD?D?D?|w[o|w]?|YYYYY|YYYY|YY|gg(ggg?)?)|(\\\\)?(Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|mm?|ss?|SS?S?|X|zz?|ZZ?|.)/g,\n    localFormattingTokens = /(\\[[^\\[]*\\])|(\\\\)?(LTS|LT|LL?L?L?|l{1,4})/g,\n    parseTokenOneOrTwoDigits = /\\d\\d?/,\n    parseTokenOneToThreeDigits = /\\d{1,3}/,\n    parseTokenThreeDigits = /\\d{3}/,\n    parseTokenFourDigits = /\\d{1,4}/,\n    parseTokenSixDigits = /[+\\-]?\\d{1,6}/,\n    parseTokenWord = /[0-9]*['a-z\\u00A0-\\u05FF\\u0700-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]+(\\.?)|[\\u0600-\\u06FF\\/]+(\\s*?[\\u0600-\\u06FF]+){1,2}/i,\n    parseTokenTimezone = /Z|[\\+\\-]\\d\\d:?\\d\\d/i,\n    parseTokenT = /T/i,\n    parseTokenTimestampMs = /[\\+\\-]?\\d+(\\.\\d{1,3})?/,\n    unitAliases = {\n      hd: 'idate',\n      hm: 'imonth',\n      hy: 'iyear'\n    },\n    formatFunctions = {},\n    ordinalizeTokens = 'DDD w M D'.split(' '),\n    paddedTokens = 'M D w'.split(' '),\n    formatTokenFunctions = {\n      iM: function () {\n        return this.iMonth() + 1;\n      },\n      iMMM: function (format) {\n        return this.localeData().iMonthsShort(this, format);\n      },\n      iMMMM: function (format) {\n        return this.localeData().iMonths(this, format);\n      },\n      iD: function () {\n        return this.iDate();\n      },\n      iDDD: function () {\n        return this.iDayOfYear();\n      },\n      iw: function () {\n        return this.iWeek();\n      },\n      iYY: function () {\n        return leftZeroFill(this.iYear() % 100, 2);\n      },\n      iYYYY: function () {\n        return leftZeroFill(this.iYear(), 4);\n      },\n      iYYYYY: function () {\n        return leftZeroFill(this.iYear(), 5);\n      },\n      igg: function () {\n        return leftZeroFill(this.iWeekYear() % 100, 2);\n      },\n      igggg: function () {\n        return this.iWeekYear();\n      },\n      iggggg: function () {\n        return leftZeroFill(this.iWeekYear(), 5);\n      }\n    },\n    i;\n  function padToken(func, count) {\n    return function (a) {\n      return leftZeroFill(func.call(this, a), count);\n    };\n  }\n  function ordinalizeToken(func, period) {\n    return function (a) {\n      return this.localeData().ordinal(func.call(this, a), period);\n    };\n  }\n  while (ordinalizeTokens.length) {\n    i = ordinalizeTokens.pop();\n    formatTokenFunctions['i' + i + 'o'] = ordinalizeToken(formatTokenFunctions['i' + i], i);\n  }\n  while (paddedTokens.length) {\n    i = paddedTokens.pop();\n    formatTokenFunctions['i' + i + i] = padToken(formatTokenFunctions['i' + i], 2);\n  }\n  formatTokenFunctions.iDDDD = padToken(formatTokenFunctions.iDDD, 3);\n\n  /************************************\r\n       Helpers\r\n   ************************************/\n\n  function extend(a, b) {\n    var key;\n    for (key in b) if (b.hasOwnProperty(key)) a[key] = b[key];\n    return a;\n  }\n  function leftZeroFill(number, targetLength) {\n    var output = number + '';\n    while (output.length < targetLength) output = '0' + output;\n    return output;\n  }\n  function isArray(input) {\n    return Object.prototype.toString.call(input) === '[object Array]';\n  }\n  function normalizeUnits(units) {\n    return units ? unitAliases[units] || units.toLowerCase().replace(/(.)s$/, '$1') : units;\n  }\n  function setDate(moment, year, month, date) {\n    var utc = moment._isUTC ? 'UTC' : '';\n    moment._d['set' + utc + 'FullYear'](year);\n    moment._d['set' + utc + 'Month'](month);\n    moment._d['set' + utc + 'Date'](date);\n  }\n  function objectCreate(parent) {\n    function F() {}\n    F.prototype = parent;\n    return new F();\n  }\n  function getPrototypeOf(object) {\n    if (Object.getPrototypeOf) return Object.getPrototypeOf(object);else if (''.__proto__)\n      // jshint ignore:line\n      return object.__proto__; // jshint ignore:line\n    else return object.constructor.prototype;\n  }\n\n  /************************************\r\n       Languages\r\n   ************************************/\n  extend(getPrototypeOf(moment.localeData()), {\n    _iMonths: ['Muharram', 'Safar', 'Rabi\\' al-Awwal', 'Rabi\\' al-Thani', 'Jumada al-Ula', 'Jumada al-Alkhirah', 'Rajab', 'Sha’ban', 'Ramadhan', 'Shawwal', 'Thul-Qi’dah', 'Thul-Hijjah'],\n    iMonths: function (m) {\n      return this._iMonths[m.iMonth()];\n    },\n    _iMonthsShort: ['Muh', 'Saf', 'Rab-I', 'Rab-II', 'Jum-I', 'Jum-II', 'Raj', 'Sha', 'Ram', 'Shw', 'Dhu-Q', 'Dhu-H'],\n    iMonthsShort: function (m) {\n      return this._iMonthsShort[m.iMonth()];\n    },\n    iMonthsParse: function (monthName) {\n      var i, mom, regex;\n      if (!this._iMonthsParse) this._iMonthsParse = [];\n      for (i = 0; i < 12; i += 1) {\n        // Make the regex if we don't have it already.\n        if (!this._iMonthsParse[i]) {\n          mom = hMoment([2000, (2 + i) % 12, 25]);\n          regex = '^' + this.iMonths(mom, '') + '$|^' + this.iMonthsShort(mom, '') + '$';\n          this._iMonthsParse[i] = new RegExp(regex.replace('.', ''), 'i');\n        }\n        // Test the regex.\n        if (this._iMonthsParse[i].test(monthName)) return i;\n      }\n    }\n  });\n  var iMonthNames = {\n    iMonths: 'محرم_صفر_ربيع الأول_ربيع الثاني_جمادى الأولى_جمادى الآخرة_رجب_شعبان_رمضان_شوال_ذو القعدة_ذو الحجة'.split('_'),\n    iMonthsShort: 'محرم_صفر_ربيع ١_ربيع ٢_جمادى ١_جمادى ٢_رجب_شعبان_رمضان_شوال_ذو القعدة_ذو الحجة'.split('_')\n  };\n\n  // Default to the momentjs 2.12+ API\n  if (typeof moment.updateLocale === 'function') {\n    moment.updateLocale('ar-sa', iMonthNames);\n  } else {\n    var oldLocale = moment.locale();\n    moment.defineLocale('ar-sa', iMonthNames);\n    moment.locale(oldLocale);\n  }\n\n  /************************************\r\n       Formatting\r\n   ************************************/\n\n  function makeFormatFunction(format) {\n    var array = format.match(formattingTokens),\n      length = array.length,\n      i;\n    for (i = 0; i < length; i += 1) if (formatTokenFunctions[array[i]]) array[i] = formatTokenFunctions[array[i]];\n    return function (mom) {\n      var output = '';\n      for (i = 0; i < length; i += 1) output += array[i] instanceof Function ? '[' + array[i].call(mom, format) + ']' : array[i];\n      return output;\n    };\n  }\n\n  /************************************\r\n       Parsing\r\n   ************************************/\n\n  function getParseRegexForToken(token, config) {\n    switch (token) {\n      case 'iDDDD':\n        return parseTokenThreeDigits;\n      case 'iYYYY':\n        return parseTokenFourDigits;\n      case 'iYYYYY':\n        return parseTokenSixDigits;\n      case 'iDDD':\n        return parseTokenOneToThreeDigits;\n      case 'iMMM':\n      case 'iMMMM':\n        return parseTokenWord;\n      case 'iMM':\n      case 'iDD':\n      case 'iYY':\n      case 'iM':\n      case 'iD':\n        return parseTokenOneOrTwoDigits;\n      case 'DDDD':\n        return parseTokenThreeDigits;\n      case 'YYYY':\n        return parseTokenFourDigits;\n      case 'YYYYY':\n        return parseTokenSixDigits;\n      case 'S':\n      case 'SS':\n      case 'SSS':\n      case 'DDD':\n        return parseTokenOneToThreeDigits;\n      case 'MMM':\n      case 'MMMM':\n      case 'dd':\n      case 'ddd':\n      case 'dddd':\n        return parseTokenWord;\n      case 'a':\n      case 'A':\n        return moment.localeData(config._l)._meridiemParse;\n      case 'X':\n        return parseTokenTimestampMs;\n      case 'Z':\n      case 'ZZ':\n        return parseTokenTimezone;\n      case 'T':\n        return parseTokenT;\n      case 'MM':\n      case 'DD':\n      case 'YY':\n      case 'HH':\n      case 'hh':\n      case 'mm':\n      case 'ss':\n      case 'M':\n      case 'D':\n      case 'd':\n      case 'H':\n      case 'h':\n      case 'm':\n      case 's':\n        return parseTokenOneOrTwoDigits;\n      default:\n        return new RegExp(token.replace('\\\\', ''));\n    }\n  }\n  function addTimeToArrayFromToken(token, input, config) {\n    var a,\n      datePartArray = config._a;\n    switch (token) {\n      case 'iM':\n      case 'iMM':\n        datePartArray[1] = input == null ? 0 : ~~input - 1;\n        break;\n      case 'iMMM':\n      case 'iMMMM':\n        a = moment.localeData(config._l).iMonthsParse(input);\n        if (a != null) datePartArray[1] = a;else config._isValid = false;\n        break;\n      case 'iD':\n      case 'iDD':\n      case 'iDDD':\n      case 'iDDDD':\n        if (input != null) datePartArray[2] = ~~input;\n        break;\n      case 'iYY':\n        datePartArray[0] = ~~input + (~~input > 47 ? 1300 : 1400);\n        break;\n      case 'iYYYY':\n      case 'iYYYYY':\n        datePartArray[0] = ~~input;\n    }\n    if (input == null) config._isValid = false;\n  }\n  function dateFromArray(config) {\n    var g,\n      h,\n      hy = config._a[0],\n      hm = config._a[1],\n      hd = config._a[2];\n    if (hy == null && hm == null && hd == null) return [0, 0, 1];\n    hy = hy || 0;\n    hm = hm || 0;\n    hd = hd || 1;\n    if (hd < 1 || hd > hMoment.iDaysInMonth(hy, hm)) config._isValid = false;\n    g = toGregorian(hy, hm, hd);\n    h = toHijri(g.gy, g.gm, g.gd);\n    config._hDiff = 0;\n    if (~~h.hy !== hy) config._hDiff += 1;\n    if (~~h.hm !== hm) config._hDiff += 1;\n    if (~~h.hd !== hd) config._hDiff += 1;\n    return [g.gy, g.gm, g.gd];\n  }\n  function makeDateFromStringAndFormat(config) {\n    var tokens = config._f.match(formattingTokens),\n      string = config._i,\n      len = tokens.length,\n      i,\n      token,\n      parsedInput;\n    config._a = [];\n    for (i = 0; i < len; i += 1) {\n      token = tokens[i];\n      parsedInput = (getParseRegexForToken(token, config).exec(string) || [])[0];\n      if (parsedInput) string = string.slice(string.indexOf(parsedInput) + parsedInput.length);\n      if (formatTokenFunctions[token]) addTimeToArrayFromToken(token, parsedInput, config);\n    }\n    if (string) config._il = string;\n    return dateFromArray(config);\n  }\n  function makeDateFromStringAndArray(config, utc) {\n    var len = config._f.length,\n      i,\n      format,\n      tempMoment,\n      bestMoment,\n      currentScore,\n      scoreToBeat;\n    if (len === 0) {\n      return makeMoment(new Date(NaN));\n    }\n    for (i = 0; i < len; i += 1) {\n      format = config._f[i];\n      currentScore = 0;\n      tempMoment = makeMoment(config._i, format, config._l, utc);\n      if (!tempMoment.isValid()) continue;\n      currentScore += tempMoment._hDiff;\n      if (tempMoment._il) currentScore += tempMoment._il.length;\n      if (scoreToBeat == null || currentScore < scoreToBeat) {\n        scoreToBeat = currentScore;\n        bestMoment = tempMoment;\n      }\n    }\n    return bestMoment;\n  }\n  function removeParsedTokens(config) {\n    var string = config._i,\n      input = '',\n      format = '',\n      array = config._f.match(formattingTokens),\n      len = array.length,\n      i,\n      match,\n      parsed;\n    for (i = 0; i < len; i += 1) {\n      match = array[i];\n      parsed = (getParseRegexForToken(match, config).exec(string) || [])[0];\n      if (parsed) string = string.slice(string.indexOf(parsed) + parsed.length);\n      if (!(formatTokenFunctions[match] instanceof Function)) {\n        format += match;\n        if (parsed) input += parsed;\n      }\n    }\n    config._i = input;\n    config._f = format;\n  }\n\n  /************************************\r\n       Week of Year\r\n   ************************************/\n\n  function iWeekOfYear(mom, firstDayOfWeek, firstDayOfWeekOfYear) {\n    var end = firstDayOfWeekOfYear - firstDayOfWeek,\n      daysToDayOfWeek = firstDayOfWeekOfYear - mom.day(),\n      adjustedMoment;\n    if (daysToDayOfWeek > end) {\n      daysToDayOfWeek -= 7;\n    }\n    if (daysToDayOfWeek < end - 7) {\n      daysToDayOfWeek += 7;\n    }\n    adjustedMoment = hMoment(mom).add(daysToDayOfWeek, 'd');\n    return {\n      week: Math.ceil(adjustedMoment.iDayOfYear() / 7),\n      year: adjustedMoment.iYear()\n    };\n  }\n\n  /************************************\r\n       Top Level Functions\r\n   ************************************/\n\n  function makeMoment(input, format, lang, utc) {\n    var config = {\n        _i: input,\n        _f: format,\n        _l: lang\n      },\n      date,\n      m,\n      hm;\n    if (format) {\n      if (isArray(format)) {\n        return makeDateFromStringAndArray(config, utc);\n      } else {\n        date = makeDateFromStringAndFormat(config);\n        removeParsedTokens(config);\n        format = 'YYYY-MM-DD-' + config._f;\n        input = leftZeroFill(date[0], 4) + '-' + leftZeroFill(date[1] + 1, 2) + '-' + leftZeroFill(date[2], 2) + '-' + config._i;\n      }\n    }\n    if (utc) m = moment.utc(input, format, lang);else m = moment(input, format, lang);\n    if (config._isValid === false) m._isValid = false;\n    m._hDiff = config._hDiff || 0;\n    hm = objectCreate(hMoment.fn);\n    extend(hm, m);\n    return hm;\n  }\n  function hMoment(input, format, lang) {\n    return makeMoment(input, format, lang, false);\n  }\n  extend(hMoment, moment);\n  hMoment.fn = objectCreate(moment.fn);\n  hMoment.utc = function (input, format, lang) {\n    return makeMoment(input, format, lang, true);\n  };\n\n  /************************************\r\n       hMoment Prototype\r\n   ************************************/\n\n  hMoment.fn.format = function (format) {\n    var i,\n      replace,\n      me = this;\n    if (format) {\n      i = 5;\n      replace = function (input) {\n        return me.localeData().longDateFormat(input) || input;\n      };\n      while (i > 0 && localFormattingTokens.test(format)) {\n        i -= 1;\n        format = format.replace(localFormattingTokens, replace);\n      }\n      if (!formatFunctions[format]) {\n        formatFunctions[format] = makeFormatFunction(format);\n      }\n      format = formatFunctions[format](this);\n    }\n    return moment.fn.format.call(this, format);\n  };\n  hMoment.fn.iYear = function (input) {\n    var lastDay, h, g;\n    if (typeof input === 'number') {\n      h = toHijri(this.year(), this.month(), this.date());\n      lastDay = Math.min(h.hd, hMoment.iDaysInMonth(input, h.hm));\n      g = toGregorian(input, h.hm, lastDay);\n      setDate(this, g.gy, g.gm, g.gd);\n      //Workaround: sometimes moment wont set the date correctly if current day is the last in the month\n      if (this.month() !== g.gm || this.date() !== g.gd || this.year() !== g.gy) {\n        setDate(this, g.gy, g.gm, g.gd);\n      }\n      moment.updateOffset(this);\n      return this;\n    } else {\n      return toHijri(this.year(), this.month(), this.date()).hy;\n    }\n  };\n  hMoment.fn.iMonth = function (input) {\n    var lastDay, h, g;\n    if (input != null) {\n      if (typeof input === 'string') {\n        input = this.localeData().iMonthsParse(input);\n        if (input >= 0) {\n          input -= 1;\n        } else {\n          return this;\n        }\n      }\n      h = toHijri(this.year(), this.month(), this.date());\n      lastDay = Math.min(h.hd, hMoment.iDaysInMonth(h.hy, input));\n      this.iYear(h.hy + div(input, 12));\n      input = mod(input, 12);\n      if (input < 0) {\n        input += 12;\n        this.iYear(this.iYear() - 1);\n      }\n      g = toGregorian(this.iYear(), input, lastDay);\n      setDate(this, g.gy, g.gm, g.gd);\n      //Workaround: sometimes moment wont set the date correctly if current day is the last in the month\n      if (this.month() !== g.gm || this.date() !== g.gd || this.year() !== g.gy) {\n        setDate(this, g.gy, g.gm, g.gd);\n      }\n      moment.updateOffset(this);\n      return this;\n    } else {\n      return toHijri(this.year(), this.month(), this.date()).hm;\n    }\n  };\n  hMoment.fn.iDate = function (input) {\n    var h, g;\n    if (typeof input === 'number') {\n      h = toHijri(this.year(), this.month(), this.date());\n      g = toGregorian(h.hy, h.hm, input);\n      setDate(this, g.gy, g.gm, g.gd);\n      //Workaround: sometimes moment wont set the date correctly if current day is the last in the month\n      if (this.month() !== g.gm || this.date() !== g.gd || this.year() !== g.gy) {\n        setDate(this, g.gy, g.gm, g.gd);\n      }\n      moment.updateOffset(this);\n      return this;\n    } else {\n      return toHijri(this.year(), this.month(), this.date()).hd;\n    }\n  };\n  hMoment.fn.iDayOfYear = function (input) {\n    var dayOfYear = Math.round((hMoment(this).startOf('day') - hMoment(this).startOf('iYear')) / 864e5) + 1;\n    return input == null ? dayOfYear : this.add(input - dayOfYear, 'd');\n  };\n  hMoment.fn.iDaysInMonth = function () {\n    return parseInt(hMoment(this).endOf('iMonth').format('iDD'));\n  };\n  hMoment.fn.iWeek = function (input) {\n    var week = iWeekOfYear(this, this.localeData()._week.dow, this.localeData()._week.doy).week;\n    return input == null ? week : this.add((input - week) * 7, 'd');\n  };\n  hMoment.fn.iWeekYear = function (input) {\n    var year = iWeekOfYear(this, this.localeData()._week.dow, this.localeData()._week.doy).year;\n    return input == null ? year : this.add(input - year, 'y');\n  };\n  hMoment.fn.add = function (val, units) {\n    var temp;\n    if (units !== null && !isNaN(+units)) {\n      temp = val;\n      val = units;\n      units = temp;\n    }\n    units = normalizeUnits(units);\n    if (units === 'iyear') {\n      this.iYear(this.iYear() + val);\n    } else if (units === 'imonth') {\n      this.iMonth(this.iMonth() + val);\n    } else if (units === 'idate') {\n      this.iDate(this.iDate() + val);\n    } else {\n      moment.fn.add.call(this, val, units);\n    }\n    return this;\n  };\n  hMoment.fn.subtract = function (val, units) {\n    var temp;\n    if (units !== null && !isNaN(+units)) {\n      temp = val;\n      val = units;\n      units = temp;\n    }\n    units = normalizeUnits(units);\n    if (units === 'iyear') {\n      this.iYear(this.iYear() - val);\n    } else if (units === 'imonth') {\n      this.iMonth(this.iMonth() - val);\n    } else if (units === 'idate') {\n      this.iDate(this.iDate() - val);\n    } else {\n      moment.fn.subtract.call(this, val, units);\n    }\n    return this;\n  };\n  hMoment.fn.startOf = function (units) {\n    units = normalizeUnits(units);\n    if (units === 'iyear' || units === 'imonth') {\n      if (units === 'iyear') {\n        this.iMonth(0);\n      }\n      this.iDate(1);\n      this.hours(0);\n      this.minutes(0);\n      this.seconds(0);\n      this.milliseconds(0);\n      return this;\n    } else {\n      return moment.fn.startOf.call(this, units);\n    }\n  };\n  hMoment.fn.endOf = function (units) {\n    units = normalizeUnits(units);\n    if (units === undefined || units === 'milisecond') {\n      return this;\n    }\n    return this.startOf(units).add(1, units === 'isoweek' ? 'week' : units).subtract(1, 'milliseconds');\n  };\n  hMoment.fn.clone = function () {\n    return hMoment(this);\n  };\n  hMoment.fn.iYears = hMoment.fn.iYear;\n  hMoment.fn.iMonths = hMoment.fn.iMonth;\n  hMoment.fn.iDates = hMoment.fn.iDate;\n  hMoment.fn.iWeeks = hMoment.fn.iWeek;\n\n  /************************************\r\n       hMoment Statics\r\n   ************************************/\n\n  hMoment.iDaysInMonth = function (year, month) {\n    var i = getNewMoonMJDNIndex(year, month + 1),\n      daysInMonth = ummalqura.ummalquraData[i] - ummalqura.ummalquraData[i - 1];\n    return daysInMonth;\n  };\n  function toHijri(gy, gm, gd) {\n    var h = d2h(g2d(gy, gm + 1, gd));\n    h.hm -= 1;\n    return h;\n  }\n  function toGregorian(hy, hm, hd) {\n    var g = d2g(h2d(hy, hm + 1, hd));\n    g.gm -= 1;\n    return g;\n  }\n  hMoment.iConvert = {\n    toHijri: toHijri,\n    toGregorian: toGregorian\n  };\n  return hMoment;\n\n  /************************************\r\n       Hijri Conversion\r\n   ************************************/\n\n  /*\r\n     Utility helper functions.\r\n   */\n\n  function div(a, b) {\n    return ~~(a / b);\n  }\n  function mod(a, b) {\n    return a - ~~(a / b) * b;\n  }\n\n  /*\r\n     Converts a date of the Hijri calendar to the Julian Day number.\r\n  \n     @param hy Hijri year (1356 to 1500)\r\n     @param hm Hijri month (1 to 12)\r\n     @param hd Hijri day (1 to 29/30)\r\n     @return Julian Day number\r\n   */\n\n  function h2d(hy, hm, hd) {\n    var i = getNewMoonMJDNIndex(hy, hm),\n      mjdn = hd + ummalqura.ummalquraData[i - 1] - 1,\n      jdn = mjdn + 2400000;\n    return jdn;\n  }\n\n  /*\r\n     Converts the Julian Day number to a date in the Hijri calendar.\r\n  \n     @param jdn Julian Day number\r\n     @return\r\n       hy: Hijri year (1356 to 1500)\r\n       hm: Hijri month (1 to 12)\r\n       hd: Hijri day (1 to 29/30)\r\n   */\n\n  function d2h(jdn) {\n    var mjdn = jdn - 2400000,\n      i = getNewMoonMJDNIndexByJDN(mjdn),\n      totalMonths = i + 16260,\n      cYears = Math.floor((totalMonths - 1) / 12),\n      hy = cYears + 1,\n      hm = totalMonths - 12 * cYears,\n      hd = mjdn - ummalqura.ummalquraData[i - 1] + 1;\n    return {\n      hy: hy,\n      hm: hm,\n      hd: hd\n    };\n  }\n\n  /*\r\n     Calculates the Julian Day number from Gregorian or Julian\r\n     calendar dates. This integer number corresponds to the noon of\r\n     the date (i.e. 12 hours of Universal Time).\r\n     The procedure was tested to be good since 1 March, -100100 (of both\r\n     calendars) up to a few million years into the future.\r\n  \n     @param gy Calendar year (years BC numbered 0, -1, -2, ...)\r\n     @param gm Calendar month (1 to 12)\r\n     @param gd Calendar day of the month (1 to 28/29/30/31)\r\n     @return Julian Day number\r\n   */\n\n  function g2d(gy, gm, gd) {\n    var d = div((gy + div(gm - 8, 6) + 100100) * 1461, 4) + div(153 * mod(gm + 9, 12) + 2, 5) + gd - 34840408;\n    d = d - div(div(gy + 100100 + div(gm - 8, 6), 100) * 3, 4) + 752;\n    return d;\n  }\n\n  /*\r\n     Calculates Gregorian and Julian calendar dates from the Julian Day number\r\n     (hdn) for the period since jdn=-34839655 (i.e. the year -100100 of both\r\n     calendars) to some millions years ahead of the present.\r\n  \n     @param jdn Julian Day number\r\n     @return\r\n       gy: Calendar year (years BC numbered 0, -1, -2, ...)\r\n       gm: Calendar month (1 to 12)\r\n       gd: Calendar day of the month M (1 to 28/29/30/31)\r\n   */\n\n  function d2g(jdn) {\n    var j, i, gd, gm, gy;\n    j = 4 * jdn + 139361631;\n    j = j + div(div(4 * jdn + 183187720, 146097) * 3, 4) * 4 - 3908;\n    i = div(mod(j, 1461), 4) * 5 + 308;\n    gd = div(mod(i, 153), 5) + 1;\n    gm = mod(div(i, 153), 12) + 1;\n    gy = div(j, 1461) - 100100 + div(8 - gm, 6);\n    return {\n      gy: gy,\n      gm: gm,\n      gd: gd\n    };\n  }\n\n  /*\r\n     Returns the index of the modified Julian day number of the new moon\r\n     by the given year and month\r\n  \n     @param hy: Hijri year (1356 to 1500)\r\n     @param hm: Hijri month (1 to 12)\r\n     @return\r\n         i: the index of the new moon in modified Julian day number.\r\n   */\n  function getNewMoonMJDNIndex(hy, hm) {\n    var cYears = hy - 1,\n      totalMonths = cYears * 12 + 1 + (hm - 1),\n      i = totalMonths - 16260;\n    return i;\n  }\n\n  /*\r\n     Returns the nearest new moon\r\n  \n     @param jdn Julian Day number\r\n     @return\r\n       i: the index of a modified Julian day number.\r\n   */\n  function getNewMoonMJDNIndexByJDN(mjdn) {\n    for (var i = 0; i < ummalqura.ummalquraData.length; i = i + 1) {\n      if (ummalqura.ummalquraData[i] > mjdn) return i;\n    }\n  }\n});","map":{"version":3,"names":["root","factory","define","amd","moment","exports","module","require","Error","ummalqura","ummalquraData","formattingTokens","localFormattingTokens","parseTokenOneOrTwoDigits","parseTokenOneToThreeDigits","parseTokenThreeDigits","parseTokenFourDigits","parseTokenSixDigits","parseTokenWord","parseTokenTimezone","parseTokenT","parseTokenTimestampMs","unitAliases","hd","hm","hy","formatFunctions","ordinalizeTokens","split","paddedTokens","formatTokenFunctions","iM","iMonth","iMMM","format","localeData","iMonthsShort","iMMMM","iMonths","iD","iDate","iDDD","iDayOfYear","iw","iWeek","iYY","leftZeroFill","iYear","iYYYY","iYYYYY","igg","iWeekYear","igggg","iggggg","i","padToken","func","count","a","call","ordinalizeToken","period","ordinal","length","pop","iDDDD","extend","b","key","hasOwnProperty","number","targetLength","output","isArray","input","Object","prototype","toString","normalizeUnits","units","toLowerCase","replace","setDate","year","month","date","utc","_isUTC","_d","objectCreate","parent","F","getPrototypeOf","object","__proto__","constructor","_iMonths","m","_iMonthsShort","iMonthsParse","monthName","mom","regex","_iMonthsParse","hMoment","RegExp","test","iMonthNames","updateLocale","oldLocale","locale","defineLocale","makeFormatFunction","array","match","Function","getParseRegexForToken","token","config","_l","_meridiemParse","addTimeToArrayFromToken","datePartArray","_a","_isValid","dateFromArray","g","h","iDaysInMonth","toGregorian","toHijri","gy","gm","gd","_hDiff","makeDateFromStringAndFormat","tokens","_f","string","_i","len","parsedInput","exec","slice","indexOf","_il","makeDateFromStringAndArray","tempMoment","bestMoment","currentScore","scoreToBeat","makeMoment","Date","NaN","isValid","removeParsedTokens","parsed","iWeekOfYear","firstDayOfWeek","firstDayOfWeekOfYear","end","daysToDayOfWeek","day","adjustedMoment","add","week","Math","ceil","lang","fn","me","longDateFormat","lastDay","min","updateOffset","div","mod","dayOfYear","round","startOf","parseInt","endOf","_week","dow","doy","val","temp","isNaN","subtract","hours","minutes","seconds","milliseconds","undefined","clone","iYears","iDates","iWeeks","getNewMoonMJDNIndex","daysInMonth","d2h","g2d","d2g","h2d","iConvert","mjdn","jdn","getNewMoonMJDNIndexByJDN","totalMonths","cYears","floor","d","j"],"sources":["D:/Own_Create/calendar/node_modules/moment-hijri/moment-hijri.js"],"sourcesContent":["// moment-hijri.js\r\n// author: Suhail Alkowaileet\r\n// This is a modified version of moment-jalaali by Behrang Noruzi Niya\r\n// license: MIT\r\n\r\n'use strict';\r\n\r\n/************************************\r\n    Expose Moment Hijri\r\n************************************/\r\n(function (root, factory) {\r\n\t/* global define */\r\n\tif (typeof define === 'function' && define.amd) {\r\n\t\tdefine(['moment'], function (moment) {\r\n\t\t\troot.moment = factory(moment)\r\n\t\t\treturn root.moment\r\n\t\t})\r\n\t} else if (typeof exports === 'object') {\r\n\t\tmodule.exports = factory(require('moment'))\r\n\t} else {\r\n\t\troot.moment = factory(root.moment)\r\n\t}\r\n})(this, function (moment) { // jshint ignore:line\r\n\r\n\tif (moment == null) {\r\n\t\tthrow new Error('Cannot find moment')\r\n\t}\r\n\r\n\t/************************************\r\n      Constants\r\n  ************************************/\r\n\r\n\tvar ummalqura = {\r\n\t\tummalquraData: [28607, 28636, 28665, 28695, 28724, 28754, 28783, 28813, 28843, 28872, 28901, 28931, 28960, 28990, 29019, 29049, 29078, 29108, 29137, 29167,\r\n                      29196, 29226, 29255, 29285, 29315, 29345, 29375, 29404, 29434, 29463, 29492, 29522, 29551, 29580, 29610, 29640, 29669, 29699, 29729, 29759,\r\n                      29788, 29818, 29847, 29876, 29906, 29935, 29964, 29994, 30023, 30053, 30082, 30112, 30141, 30171, 30200, 30230, 30259, 30289, 30318, 30348,\r\n                      30378, 30408, 30437, 30467, 30496, 30526, 30555, 30585, 30614, 30644, 30673, 30703, 30732, 30762, 30791, 30821, 30850, 30880, 30909, 30939,\r\n                      30968, 30998, 31027, 31057, 31086, 31116, 31145, 31175, 31204, 31234, 31263, 31293, 31322, 31352, 31381, 31411, 31441, 31471, 31500, 31530,\r\n                      31559, 31589, 31618, 31648, 31676, 31706, 31736, 31766, 31795, 31825, 31854, 31884, 31913, 31943, 31972, 32002, 32031, 32061, 32090, 32120,\r\n                      32150, 32180, 32209, 32239, 32268, 32298, 32327, 32357, 32386, 32416, 32445, 32475, 32504, 32534, 32563, 32593, 32622, 32652, 32681, 32711,\r\n                      32740, 32770, 32799, 32829, 32858, 32888, 32917, 32947, 32976, 33006, 33035, 33065, 33094, 33124, 33153, 33183, 33213, 33243, 33272, 33302,\r\n                      33331, 33361, 33390, 33420, 33450, 33479, 33509, 33539, 33568, 33598, 33627, 33657, 33686, 33716, 33745, 33775, 33804, 33834, 33863, 33893,\r\n                      33922, 33952, 33981, 34011, 34040, 34069, 34099, 34128, 34158, 34187, 34217, 34247, 34277, 34306, 34336, 34365, 34395, 34424, 34454, 34483,\r\n                      34512, 34542, 34571, 34601, 34631, 34660, 34690, 34719, 34749, 34778, 34808, 34837, 34867, 34896, 34926, 34955, 34985, 35015, 35044, 35074,\r\n                      35103, 35133, 35162, 35192, 35222, 35251, 35280, 35310, 35340, 35370, 35399, 35429, 35458, 35488, 35517, 35547, 35576, 35605, 35635, 35665,\r\n                      35694, 35723, 35753, 35782, 35811, 35841, 35871, 35901, 35930, 35960, 35989, 36019, 36048, 36078, 36107, 36136, 36166, 36195, 36225, 36254,\r\n                      36284, 36314, 36343, 36373, 36403, 36433, 36462, 36492, 36521, 36551, 36580, 36610, 36639, 36669, 36698, 36728, 36757, 36786, 36816, 36845,\r\n                      36875, 36904, 36934, 36963, 36993, 37022, 37052, 37081, 37111, 37141, 37170, 37200, 37229, 37259, 37288, 37318, 37347, 37377, 37406, 37436,\r\n                      37465, 37495, 37524, 37554, 37584, 37613, 37643, 37672, 37701, 37731, 37760, 37790, 37819, 37849, 37878, 37908, 37938, 37967, 37997, 38027,\r\n                      38056, 38085, 38115, 38144, 38174, 38203, 38233, 38262, 38292, 38322, 38351, 38381, 38410, 38440, 38469, 38499, 38528, 38558, 38587, 38617,\r\n                      38646, 38676, 38705, 38735, 38764, 38794, 38823, 38853, 38882, 38912, 38941, 38971, 39001, 39030, 39059, 39089, 39118, 39148, 39178, 39208,\r\n                      39237, 39267, 39297, 39326, 39355, 39385, 39414, 39444, 39473, 39503, 39532, 39562, 39592, 39621, 39650, 39680, 39709, 39739, 39768, 39798,\r\n                      39827, 39857, 39886, 39916, 39946, 39975, 40005, 40035, 40064, 40094, 40123, 40153, 40182, 40212, 40241, 40271, 40300, 40330, 40359, 40389,\r\n                      40418, 40448, 40477, 40507, 40536, 40566, 40595, 40625, 40655, 40685, 40714, 40744, 40773, 40803, 40832, 40862, 40892, 40921, 40951, 40980,\r\n                      41009, 41039, 41068, 41098, 41127, 41157, 41186, 41216, 41245, 41275, 41304, 41334, 41364, 41393, 41422, 41452, 41481, 41511, 41540, 41570,\r\n                      41599, 41629, 41658, 41688, 41718, 41748, 41777, 41807, 41836, 41865, 41894, 41924, 41953, 41983, 42012, 42042, 42072, 42102, 42131, 42161,\r\n                      42190, 42220, 42249, 42279, 42308, 42337, 42367, 42397, 42426, 42456, 42485, 42515, 42545, 42574, 42604, 42633, 42662, 42692, 42721, 42751,\r\n                      42780, 42810, 42839, 42869, 42899, 42929, 42958, 42988, 43017, 43046, 43076, 43105, 43135, 43164, 43194, 43223, 43253, 43283, 43312, 43342,\r\n                      43371, 43401, 43430, 43460, 43489, 43519, 43548, 43578, 43607, 43637, 43666, 43696, 43726, 43755, 43785, 43814, 43844, 43873, 43903, 43932,\r\n                      43962, 43991, 44021, 44050, 44080, 44109, 44139, 44169, 44198, 44228, 44258, 44287, 44317, 44346, 44375, 44405, 44434, 44464, 44493, 44523,\r\n                      44553, 44582, 44612, 44641, 44671, 44700, 44730, 44759, 44788, 44818, 44847, 44877, 44906, 44936, 44966, 44996, 45025, 45055, 45084, 45114,\r\n                      45143, 45172, 45202, 45231, 45261, 45290, 45320, 45350, 45380, 45409, 45439, 45468, 45498, 45527, 45556, 45586, 45615, 45644, 45674, 45704,\r\n                      45733, 45763, 45793, 45823, 45852, 45882, 45911, 45940, 45970, 45999, 46028, 46058, 46088, 46117, 46147, 46177, 46206, 46236, 46265, 46295,\r\n                      46324, 46354, 46383, 46413, 46442, 46472, 46501, 46531, 46560, 46590, 46620, 46649, 46679, 46708, 46738, 46767, 46797, 46826, 46856, 46885,\r\n                      46915, 46944, 46974, 47003, 47033, 47063, 47092, 47122, 47151, 47181, 47210, 47240, 47269, 47298, 47328, 47357, 47387, 47417, 47446, 47476,\r\n                      47506, 47535, 47565, 47594, 47624, 47653, 47682, 47712, 47741, 47771, 47800, 47830, 47860, 47890, 47919, 47949, 47978, 48008, 48037, 48066,\r\n                      48096, 48125, 48155, 48184, 48214, 48244, 48273, 48303, 48333, 48362, 48392, 48421, 48450, 48480, 48509, 48538, 48568, 48598, 48627, 48657,\r\n                      48687, 48717, 48746, 48776, 48805, 48834, 48864, 48893, 48922, 48952, 48982, 49011, 49041, 49071, 49100, 49130, 49160, 49189, 49218, 49248,\r\n                      49277, 49306, 49336, 49365, 49395, 49425, 49455, 49484, 49514, 49543, 49573, 49602, 49632, 49661, 49690, 49720, 49749, 49779, 49809, 49838,\r\n                      49868, 49898, 49927, 49957, 49986, 50016, 50045, 50075, 50104, 50133, 50163, 50192, 50222, 50252, 50281, 50311, 50340, 50370, 50400, 50429,\r\n                      50459, 50488, 50518, 50547, 50576, 50606, 50635, 50665, 50694, 50724, 50754, 50784, 50813, 50843, 50872, 50902, 50931, 50960, 50990, 51019,\r\n                      51049, 51078, 51108, 51138, 51167, 51197, 51227, 51256, 51286, 51315, 51345, 51374, 51403, 51433, 51462, 51492, 51522, 51552, 51582, 51611,\r\n                      51641, 51670, 51699, 51729, 51758, 51787, 51816, 51846, 51876, 51906, 51936, 51965, 51995, 52025, 52054, 52083, 52113, 52142, 52171, 52200,\r\n                      52230, 52260, 52290, 52319, 52349, 52379, 52408, 52438, 52467, 52497, 52526, 52555, 52585, 52614, 52644, 52673, 52703, 52733, 52762, 52792,\r\n                      52822, 52851, 52881, 52910, 52939, 52969, 52998, 53028, 53057, 53087, 53116, 53146, 53176, 53205, 53235, 53264, 53294, 53324, 53353, 53383,\r\n                      53412, 53441, 53471, 53500, 53530, 53559, 53589, 53619, 53648, 53678, 53708, 53737, 53767, 53796, 53825, 53855, 53884, 53913, 53943, 53973,\r\n                      54003, 54032, 54062, 54092, 54121, 54151, 54180, 54209, 54239, 54268, 54297, 54327, 54357, 54387, 54416, 54446, 54476, 54505, 54535, 54564,\r\n                      54593, 54623, 54652, 54681, 54711, 54741, 54770, 54800, 54830, 54859, 54889, 54919, 54948, 54977, 55007, 55036, 55066, 55095, 55125, 55154,\r\n                      55184, 55213, 55243, 55273, 55302, 55332, 55361, 55391, 55420, 55450, 55479, 55508, 55538, 55567, 55597, 55627, 55657, 55686, 55716, 55745,\r\n                      55775, 55804, 55834, 55863, 55892, 55922, 55951, 55981, 56011, 56040, 56070, 56100, 56129, 56159, 56188, 56218, 56247, 56276, 56306, 56335,\r\n                      56365, 56394, 56424, 56454, 56483, 56513, 56543, 56572, 56601, 56631, 56660, 56690, 56719, 56749, 56778, 56808, 56837, 56867, 56897, 56926,\r\n                      56956, 56985, 57015, 57044, 57074, 57103, 57133, 57162, 57192, 57221, 57251, 57280, 57310, 57340, 57369, 57399, 57429, 57458, 57487, 57517,\r\n                      57546, 57576, 57605, 57634, 57664, 57694, 57723, 57753, 57783, 57813, 57842, 57871, 57901, 57930, 57959, 57989, 58018, 58048, 58077, 58107,\r\n                      58137, 58167, 58196, 58226, 58255, 58285, 58314, 58343, 58373, 58402, 58432, 58461, 58491, 58521, 58551, 58580, 58610, 58639, 58669, 58698,\r\n                      58727, 58757, 58786, 58816, 58845, 58875, 58905, 58934, 58964, 58994, 59023, 59053, 59082, 59111, 59141, 59170, 59200, 59229, 59259, 59288,\r\n                      59318, 59348, 59377, 59407, 59436, 59466, 59495, 59525, 59554, 59584, 59613, 59643, 59672, 59702, 59731, 59761, 59791, 59820, 59850, 59879,\r\n                      59909, 59939, 59968, 59997, 60027, 60056, 60086, 60115, 60145, 60174, 60204, 60234, 60264, 60293, 60323, 60352, 60381, 60411, 60440, 60469,\r\n                      60499, 60528, 60558, 60588, 60618, 60648, 60677, 60707, 60736, 60765, 60795, 60824, 60853, 60883, 60912, 60942, 60972, 61002, 61031, 61061,\r\n                      61090, 61120, 61149, 61179, 61208, 61237, 61267, 61296, 61326, 61356, 61385, 61415, 61445, 61474, 61504, 61533, 61563, 61592, 61621, 61651,\r\n                      61680, 61710, 61739, 61769, 61799, 61828, 61858, 61888, 61917, 61947, 61976, 62006, 62035, 62064, 62094, 62123, 62153, 62182, 62212, 62242,\r\n                      62271, 62301, 62331, 62360, 62390, 62419, 62448, 62478, 62507, 62537, 62566, 62596, 62625, 62655, 62685, 62715, 62744, 62774, 62803, 62832,\r\n                      62862, 62891, 62921, 62950, 62980, 63009, 63039, 63069, 63099, 63128, 63157, 63187, 63216, 63246, 63275, 63305, 63334, 63363, 63393, 63423,\r\n                      63453, 63482, 63512, 63541, 63571, 63600, 63630, 63659, 63689, 63718, 63747, 63777, 63807, 63836, 63866, 63895, 63925, 63955, 63984, 64014,\r\n                      64043, 64073, 64102, 64131, 64161, 64190, 64220, 64249, 64279, 64309, 64339, 64368, 64398, 64427, 64457, 64486, 64515, 64545, 64574, 64603,\r\n                      64633, 64663, 64692, 64722, 64752, 64782, 64811, 64841, 64870, 64899, 64929, 64958, 64987, 65017, 65047, 65076, 65106, 65136, 65166, 65195,\r\n                      65225, 65254, 65283, 65313, 65342, 65371, 65401, 65431, 65460, 65490, 65520, 65549, 65579, 65608, 65638, 65667, 65697, 65726, 65755, 65785,\r\n                      65815, 65844, 65874, 65903, 65933, 65963, 65992, 66022, 66051, 66081, 66110, 66140, 66169, 66199, 66228, 66258, 66287, 66317, 66346, 66376,\r\n                      66405, 66435, 66465, 66494, 66524, 66553, 66583, 66612, 66641, 66671, 66700, 66730, 66760, 66789, 66819, 66849, 66878, 66908, 66937, 66967,\r\n                      66996, 67025, 67055, 67084, 67114, 67143, 67173, 67203, 67233, 67262, 67292, 67321, 67351, 67380, 67409, 67439, 67468, 67497, 67527, 67557,\r\n                      67587, 67617, 67646, 67676, 67705, 67735, 67764, 67793, 67823, 67852, 67882, 67911, 67941, 67971, 68000, 68030, 68060, 68089, 68119, 68148,\r\n                      68177, 68207, 68236, 68266, 68295, 68325, 68354, 68384, 68414, 68443, 68473, 68502, 68532, 68561, 68591, 68620, 68650, 68679, 68708, 68738,\r\n                      68768, 68797, 68827, 68857, 68886, 68916, 68946, 68975, 69004, 69034, 69063, 69092, 69122, 69152, 69181, 69211, 69240, 69270, 69300, 69330,\r\n                      69359, 69388, 69418, 69447, 69476, 69506, 69535, 69565, 69595, 69624, 69654, 69684, 69713, 69743, 69772, 69802, 69831, 69861, 69890, 69919,\r\n                      69949, 69978, 70008, 70038, 70067, 70097, 70126, 70156, 70186, 70215, 70245, 70274, 70303, 70333, 70362, 70392, 70421, 70451, 70481, 70510,\r\n                      70540, 70570, 70599, 70629, 70658, 70687, 70717, 70746, 70776, 70805, 70835, 70864, 70894, 70924, 70954, 70983, 71013, 71042, 71071, 71101,\r\n                      71130, 71159, 71189, 71218, 71248, 71278, 71308, 71337, 71367, 71397, 71426, 71455, 71485, 71514, 71543, 71573, 71602, 71632, 71662, 71691,\r\n                      71721, 71751, 71781, 71810, 71839, 71869, 71898, 71927, 71957, 71986, 72016, 72046, 72075, 72105, 72135, 72164, 72194, 72223, 72253, 72282,\r\n                      72311, 72341, 72370, 72400, 72429, 72459, 72489, 72518, 72548, 72577, 72607, 72637, 72666, 72695, 72725, 72754, 72784, 72813, 72843, 72872,\r\n                      72902, 72931, 72961, 72991, 73020, 73050, 73080, 73109, 73139, 73168, 73197, 73227, 73256, 73286, 73315, 73345, 73375, 73404, 73434, 73464,\r\n                      73493, 73523, 73552, 73581, 73611, 73640, 73669, 73699, 73729, 73758, 73788, 73818, 73848, 73877, 73907, 73936, 73965, 73995, 74024, 74053,\r\n                      74083, 74113, 74142, 74172, 74202, 74231, 74261, 74291, 74320, 74349, 74379, 74408, 74437, 74467, 74497, 74526, 74556, 74586, 74615, 74645,\r\n                      74675, 74704, 74733, 74763, 74792, 74822, 74851, 74881, 74910, 74940, 74969, 74999, 75029, 75058, 75088, 75117, 75147, 75176, 75206, 75235,\r\n                      75264, 75294, 75323, 75353, 75383, 75412, 75442, 75472, 75501, 75531, 75560, 75590, 75619, 75648, 75678, 75707, 75737, 75766, 75796, 75826,\r\n                      75856, 75885, 75915, 75944, 75974, 76003, 76032, 76062, 76091, 76121, 76150, 76180, 76210, 76239, 76269, 76299, 76328, 76358, 76387, 76416,\r\n                      76446, 76475, 76505, 76534, 76564, 76593, 76623, 76653, 76682, 76712, 76741, 76771, 76801, 76830, 76859, 76889, 76918, 76948, 76977, 77007,\r\n                      77036, 77066, 77096, 77125, 77155, 77185, 77214, 77243, 77273, 77302, 77332, 77361, 77390, 77420, 77450, 77479, 77509, 77539, 77569, 77598,\r\n                      77627, 77657, 77686, 77715, 77745, 77774, 77804, 77833, 77863, 77893, 77923, 77952, 77982, 78011, 78041, 78070, 78099, 78129, 78158, 78188,\r\n                      78217, 78247, 78277, 78307, 78336, 78366, 78395, 78425, 78454, 78483, 78513, 78542, 78572, 78601, 78631, 78661, 78690, 78720, 78750, 78779,\r\n                      78808, 78838, 78867, 78897, 78926, 78956, 78985, 79015, 79044, 79074, 79104, 79133, 79163, 79192, 79222, 79251, 79281, 79310, 79340, 79369,\r\n                      79399, 79428, 79458, 79487, 79517, 79546, 79576, 79606, 79635, 79665, 79695, 79724, 79753, 79783, 79812, 79841, 79871, 79900, 79930, 79960,\r\n                      79990]\r\n\t}\r\n\r\n\tvar formattingTokens = /(\\[[^\\[]*\\])|(\\\\)?i(Mo|MM?M?M?|Do|DDDo|DD?D?D?|w[o|w]?|YYYYY|YYYY|YY|gg(ggg?)?)|(\\\\)?(Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|mm?|ss?|SS?S?|X|zz?|ZZ?|.)/g,\r\n\t\tlocalFormattingTokens = /(\\[[^\\[]*\\])|(\\\\)?(LTS|LT|LL?L?L?|l{1,4})/g\r\n\r\n\t, parseTokenOneOrTwoDigits = /\\d\\d?/, parseTokenOneToThreeDigits = /\\d{1,3}/, parseTokenThreeDigits = /\\d{3}/, parseTokenFourDigits = /\\d{1,4}/, parseTokenSixDigits = /[+\\-]?\\d{1,6}/, parseTokenWord = /[0-9]*['a-z\\u00A0-\\u05FF\\u0700-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]+(\\.?)|[\\u0600-\\u06FF\\/]+(\\s*?[\\u0600-\\u06FF]+){1,2}/i, parseTokenTimezone = /Z|[\\+\\-]\\d\\d:?\\d\\d/i, parseTokenT = /T/i, parseTokenTimestampMs = /[\\+\\-]?\\d+(\\.\\d{1,3})?/\r\n\r\n\t, unitAliases = {\r\n\t\thd: 'idate',\r\n\t\thm: 'imonth',\r\n\t\thy: 'iyear'\r\n\t}\r\n\r\n\t, formatFunctions = {}\r\n\r\n\t, ordinalizeTokens = 'DDD w M D'.split(' '), paddedTokens = 'M D w'.split(' ')\r\n\r\n\t, formatTokenFunctions = {\r\n\t\tiM: function () {\r\n\t\t\treturn this.iMonth() + 1\r\n\t\t},\r\n\t\tiMMM: function (format) {\r\n\t\t\treturn this.localeData().iMonthsShort(this, format)\r\n\t\t},\r\n\t\tiMMMM: function (format) {\r\n\t\t\treturn this.localeData().iMonths(this, format)\r\n\t\t},\r\n\t\tiD: function () {\r\n\t\t\treturn this.iDate()\r\n\t\t},\r\n\t\tiDDD: function () {\r\n\t\t\treturn this.iDayOfYear()\r\n\t\t},\r\n\t\tiw: function () {\r\n\t\t\treturn this.iWeek()\r\n\t\t},\r\n\t\tiYY: function () {\r\n\t\t\treturn leftZeroFill(this.iYear() % 100, 2)\r\n\t\t},\r\n\t\tiYYYY: function () {\r\n\t\t\treturn leftZeroFill(this.iYear(), 4)\r\n\t\t},\r\n\t\tiYYYYY: function () {\r\n\t\t\treturn leftZeroFill(this.iYear(), 5)\r\n\t\t},\r\n\t\tigg: function () {\r\n\t\t\treturn leftZeroFill(this.iWeekYear() % 100, 2)\r\n\t\t},\r\n\t\tigggg: function () {\r\n\t\t\treturn this.iWeekYear()\r\n\t\t},\r\n\t\tiggggg: function () {\r\n\t\t\treturn leftZeroFill(this.iWeekYear(), 5)\r\n\t\t}\r\n\t}, i\r\n\r\n\tfunction padToken(func, count) {\r\n\t\treturn function (a) {\r\n\t\t\treturn leftZeroFill(func.call(this, a), count)\r\n\t\t}\r\n\t}\r\n\r\n\tfunction ordinalizeToken(func, period) {\r\n\t\treturn function (a) {\r\n\t\t\treturn this.localeData().ordinal(func.call(this, a), period)\r\n\t\t}\r\n\t}\r\n\r\n\twhile (ordinalizeTokens.length) {\r\n\t\ti = ordinalizeTokens.pop()\r\n\t\tformatTokenFunctions['i' + i + 'o'] = ordinalizeToken(formatTokenFunctions['i' + i], i)\r\n\t}\r\n\twhile (paddedTokens.length) {\r\n\t\ti = paddedTokens.pop()\r\n\t\tformatTokenFunctions['i' + i + i] = padToken(formatTokenFunctions['i' + i], 2)\r\n\t}\r\n\tformatTokenFunctions.iDDDD = padToken(formatTokenFunctions.iDDD, 3)\r\n\r\n\t/************************************\r\n      Helpers\r\n  ************************************/\r\n\r\n\tfunction extend(a, b) {\r\n\t\tvar key\r\n\t\tfor (key in b)\r\n\t\t\tif (b.hasOwnProperty(key))\r\n\t\t\t\ta[key] = b[key]\r\n\t\treturn a\r\n\t}\r\n\r\n\tfunction leftZeroFill(number, targetLength) {\r\n\t\tvar output = number + ''\r\n\t\twhile (output.length < targetLength)\r\n\t\t\toutput = '0' + output\r\n\t\treturn output\r\n\t}\r\n\r\n\tfunction isArray(input) {\r\n\t\treturn Object.prototype.toString.call(input) === '[object Array]'\r\n\t}\r\n\r\n\tfunction normalizeUnits(units) {\r\n\t\treturn units ? unitAliases[units] || units.toLowerCase().replace(/(.)s$/, '$1') : units\r\n\t}\r\n\r\n\tfunction setDate(moment, year, month, date) {\r\n\t\tvar utc = moment._isUTC ? 'UTC' : ''\r\n\t\tmoment._d['set' + utc + 'FullYear'](year)\r\n\t\tmoment._d['set' + utc + 'Month'](month)\r\n\t\tmoment._d['set' + utc + 'Date'](date)\r\n\t}\r\n\r\n\tfunction objectCreate(parent) {\r\n\t\tfunction F() {}\r\n\t\tF.prototype = parent\r\n\t\treturn new F()\r\n\t}\r\n\r\n\tfunction getPrototypeOf(object) {\r\n\t\tif (Object.getPrototypeOf)\r\n\t\t\treturn Object.getPrototypeOf(object)\r\n\t\telse if (''.__proto__) // jshint ignore:line\r\n\t\t\treturn object.__proto__ // jshint ignore:line\r\n\t\telse\r\n\t\t\treturn object.constructor.prototype\r\n\t}\r\n\r\n\t/************************************\r\n      Languages\r\n  ************************************/\r\n\textend(getPrototypeOf(moment.localeData()), {\r\n\t\t_iMonths: ['Muharram'\r\n                , 'Safar'\r\n                , 'Rabi\\' al-Awwal'\r\n                , 'Rabi\\' al-Thani'\r\n                , 'Jumada al-Ula'\r\n                , 'Jumada al-Alkhirah'\r\n                , 'Rajab'\r\n                , 'Sha’ban'\r\n                , 'Ramadhan'\r\n                , 'Shawwal'\r\n                , 'Thul-Qi’dah'\r\n                , 'Thul-Hijjah'\r\n                ],\r\n\t\tiMonths: function (m) {\r\n\t\t\treturn this._iMonths[m.iMonth()]\r\n\t\t}\r\n\r\n\t\t,\r\n\t\t_iMonthsShort: ['Muh'\r\n                      , 'Saf'\r\n                      , 'Rab-I'\r\n                      , 'Rab-II'\r\n                      , 'Jum-I'\r\n                      , 'Jum-II'\r\n                      , 'Raj'\r\n                      , 'Sha'\r\n                      , 'Ram'\r\n                      , 'Shw'\r\n                      , 'Dhu-Q'\r\n                      , 'Dhu-H'\r\n                      ],\r\n\t\tiMonthsShort: function (m) {\r\n\t\t\treturn this._iMonthsShort[m.iMonth()]\r\n\t\t}\r\n\r\n\t\t,\r\n\t\tiMonthsParse: function (monthName) {\r\n\t\t\tvar i, mom, regex\r\n\t\t\tif (!this._iMonthsParse)\r\n\t\t\t\tthis._iMonthsParse = []\r\n\t\t\tfor (i = 0; i < 12; i += 1) {\r\n\t\t\t\t// Make the regex if we don't have it already.\r\n\t\t\t\tif (!this._iMonthsParse[i]) {\r\n\t\t\t\t\tmom = hMoment([2000, (2 + i) % 12, 25])\r\n\t\t\t\t\tregex = '^' + this.iMonths(mom, '') + '$|^' + this.iMonthsShort(mom, '') + '$'\r\n\t\t\t\t\tthis._iMonthsParse[i] = new RegExp(regex.replace('.', ''), 'i')\r\n\t\t\t\t}\r\n\t\t\t\t// Test the regex.\r\n\t\t\t\tif (this._iMonthsParse[i].test(monthName))\r\n\t\t\t\t\treturn i\r\n\t\t\t}\r\n\t\t}\r\n\t});\r\n\tvar iMonthNames = {\r\n\t\tiMonths: 'محرم_صفر_ربيع الأول_ربيع الثاني_جمادى الأولى_جمادى الآخرة_رجب_شعبان_رمضان_شوال_ذو القعدة_ذو الحجة'.split('_'),\r\n\t\tiMonthsShort: 'محرم_صفر_ربيع ١_ربيع ٢_جمادى ١_جمادى ٢_رجب_شعبان_رمضان_شوال_ذو القعدة_ذو الحجة'.split('_')\r\n\t};\r\n\r\n\t// Default to the momentjs 2.12+ API\r\n\tif (typeof moment.updateLocale === 'function') {\r\n\t\tmoment.updateLocale('ar-sa', iMonthNames);\r\n\t} else {\r\n\t\tvar oldLocale = moment.locale();\r\n\t\tmoment.defineLocale('ar-sa', iMonthNames);\r\n\t\tmoment.locale(oldLocale);\r\n\t}\r\n\r\n\t/************************************\r\n      Formatting\r\n  ************************************/\r\n\r\n\tfunction makeFormatFunction(format) {\r\n\t\tvar array = format.match(formattingTokens),\r\n\t\t\tlength = array.length,\r\n\t\t\ti\r\n\r\n\t\tfor (i = 0; i < length; i += 1)\r\n\t\t\tif (formatTokenFunctions[array[i]])\r\n\t\t\t\tarray[i] = formatTokenFunctions[array[i]]\r\n\r\n\t\treturn function (mom) {\r\n\t\t\tvar output = ''\r\n\t\t\tfor (i = 0; i < length; i += 1)\r\n\t\t\t\toutput += array[i] instanceof Function ? '[' + array[i].call(mom, format) + ']' : array[i]\r\n\t\t\treturn output\r\n\t\t}\r\n\t}\r\n\r\n\t/************************************\r\n      Parsing\r\n  ************************************/\r\n\r\n\tfunction getParseRegexForToken(token, config) {\r\n\t\tswitch (token) {\r\n\t\tcase 'iDDDD':\r\n\t\t\treturn parseTokenThreeDigits\r\n\t\tcase 'iYYYY':\r\n\t\t\treturn parseTokenFourDigits\r\n\t\tcase 'iYYYYY':\r\n\t\t\treturn parseTokenSixDigits\r\n\t\tcase 'iDDD':\r\n\t\t\treturn parseTokenOneToThreeDigits\r\n\t\tcase 'iMMM':\r\n\t\tcase 'iMMMM':\r\n\t\t\treturn parseTokenWord\r\n\t\tcase 'iMM':\r\n\t\tcase 'iDD':\r\n\t\tcase 'iYY':\r\n\t\tcase 'iM':\r\n\t\tcase 'iD':\r\n\t\t\treturn parseTokenOneOrTwoDigits\r\n\t\tcase 'DDDD':\r\n\t\t\treturn parseTokenThreeDigits\r\n\t\tcase 'YYYY':\r\n\t\t\treturn parseTokenFourDigits\r\n\t\tcase 'YYYYY':\r\n\t\t\treturn parseTokenSixDigits\r\n\t\tcase 'S':\r\n\t\tcase 'SS':\r\n\t\tcase 'SSS':\r\n\t\tcase 'DDD':\r\n\t\t\treturn parseTokenOneToThreeDigits\r\n\t\tcase 'MMM':\r\n\t\tcase 'MMMM':\r\n\t\tcase 'dd':\r\n\t\tcase 'ddd':\r\n\t\tcase 'dddd':\r\n\t\t\treturn parseTokenWord\r\n\t\tcase 'a':\r\n\t\tcase 'A':\r\n\t\t\treturn moment.localeData(config._l)._meridiemParse\r\n\t\tcase 'X':\r\n\t\t\treturn parseTokenTimestampMs\r\n\t\tcase 'Z':\r\n\t\tcase 'ZZ':\r\n\t\t\treturn parseTokenTimezone\r\n\t\tcase 'T':\r\n\t\t\treturn parseTokenT\r\n\t\tcase 'MM':\r\n\t\tcase 'DD':\r\n\t\tcase 'YY':\r\n\t\tcase 'HH':\r\n\t\tcase 'hh':\r\n\t\tcase 'mm':\r\n\t\tcase 'ss':\r\n\t\tcase 'M':\r\n\t\tcase 'D':\r\n\t\tcase 'd':\r\n\t\tcase 'H':\r\n\t\tcase 'h':\r\n\t\tcase 'm':\r\n\t\tcase 's':\r\n\t\t\treturn parseTokenOneOrTwoDigits\r\n\t\tdefault:\r\n\t\t\treturn new RegExp(token.replace('\\\\', ''))\r\n\t\t}\r\n\t}\r\n\r\n\tfunction addTimeToArrayFromToken(token, input, config) {\r\n\t\tvar a, datePartArray = config._a\r\n\r\n\t\tswitch (token) {\r\n\t\tcase 'iM':\r\n\t\tcase 'iMM':\r\n\t\t\tdatePartArray[1] = input == null ? 0 : ~~input - 1\r\n\t\t\tbreak\r\n\t\tcase 'iMMM':\r\n\t\tcase 'iMMMM':\r\n\t\t\ta = moment.localeData(config._l).iMonthsParse(input)\r\n\t\t\tif (a != null)\r\n\t\t\t\tdatePartArray[1] = a\r\n\t\t\telse\r\n\t\t\t\tconfig._isValid = false\r\n\t\t\tbreak\r\n\t\tcase 'iD':\r\n\t\tcase 'iDD':\r\n\t\tcase 'iDDD':\r\n\t\tcase 'iDDDD':\r\n\t\t\tif (input != null)\r\n\t\t\t\tdatePartArray[2] = ~~input\r\n\t\t\tbreak\r\n\t\tcase 'iYY':\r\n\t\t\tdatePartArray[0] = ~~input + (~~input > 47 ? 1300 : 1400)\r\n\t\t\tbreak\r\n\t\tcase 'iYYYY':\r\n\t\tcase 'iYYYYY':\r\n\t\t\tdatePartArray[0] = ~~input\r\n\t\t}\r\n\t\tif (input == null)\r\n\t\t\tconfig._isValid = false\r\n\t}\r\n\r\n\tfunction dateFromArray(config) {\r\n\t\tvar g, h, hy = config._a[0],\r\n\t\t\thm = config._a[1],\r\n\t\t\thd = config._a[2]\r\n\r\n\t\tif ((hy == null) && (hm == null) && (hd == null))\r\n\t\t\treturn [0, 0, 1]\r\n\t\thy = hy || 0\r\n\t\thm = hm || 0\r\n\t\thd = hd || 1\r\n\t\tif (hd < 1 || hd > hMoment.iDaysInMonth(hy, hm))\r\n\t\t\tconfig._isValid = false\r\n\t\tg = toGregorian(hy, hm, hd)\r\n\t\th = toHijri(g.gy, g.gm, g.gd)\r\n\t\tconfig._hDiff = 0\r\n\t\tif (~~h.hy !== hy)\r\n\t\t\tconfig._hDiff += 1\r\n\t\tif (~~h.hm !== hm)\r\n\t\t\tconfig._hDiff += 1\r\n\t\tif (~~h.hd !== hd)\r\n\t\t\tconfig._hDiff += 1\r\n\t\treturn [g.gy, g.gm, g.gd]\r\n\t}\r\n\r\n\tfunction makeDateFromStringAndFormat(config) {\r\n\t\tvar tokens = config._f.match(formattingTokens),\r\n\t\t\tstring = config._i,\r\n\t\t\tlen = tokens.length,\r\n\t\t\ti, token, parsedInput\r\n\r\n\t\tconfig._a = []\r\n\r\n\t\tfor (i = 0; i < len; i += 1) {\r\n\t\t\ttoken = tokens[i]\r\n\t\t\tparsedInput = (getParseRegexForToken(token, config).exec(string) || [])[0];\r\n\t\t\tif (parsedInput)\r\n\t\t\t\tstring = string.slice(string.indexOf(parsedInput) + parsedInput.length)\r\n\t\t\tif (formatTokenFunctions[token])\r\n\t\t\t\taddTimeToArrayFromToken(token, parsedInput, config)\r\n\t\t}\r\n\t\tif (string)\r\n\t\t\tconfig._il = string\r\n\r\n\t\treturn dateFromArray(config)\r\n\t}\r\n\r\n\tfunction makeDateFromStringAndArray(config, utc) {\r\n\t\tvar len = config._f.length\r\n\t\t, i\r\n\t\t, format\r\n\t\t, tempMoment\r\n\t\t, bestMoment\r\n\t\t, currentScore\r\n\t\t, scoreToBeat\r\n\r\n\t\tif (len === 0) {\r\n\t\t\treturn makeMoment(new Date(NaN))\r\n\t\t}\r\n\r\n\t\tfor (i = 0; i < len; i += 1) {\r\n\t\t\tformat = config._f[i]\r\n\t\t\tcurrentScore = 0\r\n\t\t\ttempMoment = makeMoment(config._i, format, config._l, utc)\r\n\r\n\t\t\tif (!tempMoment.isValid()) continue\r\n\r\n\t\t\tcurrentScore += tempMoment._hDiff\r\n\t\t\tif (tempMoment._il)\r\n\t\t\t\tcurrentScore += tempMoment._il.length\r\n\t\t\tif (scoreToBeat == null || currentScore < scoreToBeat) {\r\n\t\t\t\tscoreToBeat = currentScore\r\n\t\t\t\tbestMoment = tempMoment\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn bestMoment\r\n\t}\r\n\r\n\tfunction removeParsedTokens(config) {\r\n\t\tvar string = config._i,\r\n\t\t\tinput = '',\r\n\t\t\tformat = '',\r\n\t\t\tarray = config._f.match(formattingTokens),\r\n\t\t\tlen = array.length,\r\n\t\t\ti, match, parsed\r\n\r\n\t\tfor (i = 0; i < len; i += 1) {\r\n\t\t\tmatch = array[i]\r\n\t\t\tparsed = (getParseRegexForToken(match, config).exec(string) || [])[0]\r\n\t\t\tif (parsed)\r\n\t\t\t\tstring = string.slice(string.indexOf(parsed) + parsed.length)\r\n\t\t\tif (!(formatTokenFunctions[match] instanceof Function)) {\r\n\t\t\t\tformat += match\r\n\t\t\t\tif (parsed)\r\n\t\t\t\t\tinput += parsed\r\n\t\t\t}\r\n\t\t}\r\n\t\tconfig._i = input\r\n\t\tconfig._f = format\r\n\t}\r\n\r\n\t/************************************\r\n      Week of Year\r\n  ************************************/\r\n\r\n\tfunction iWeekOfYear(mom, firstDayOfWeek, firstDayOfWeekOfYear) {\r\n\t\tvar end = firstDayOfWeekOfYear - firstDayOfWeek,\r\n\t\t\tdaysToDayOfWeek = firstDayOfWeekOfYear - mom.day(),\r\n\t\t\tadjustedMoment\r\n\r\n\t\tif (daysToDayOfWeek > end) {\r\n\t\t\tdaysToDayOfWeek -= 7\r\n\t\t}\r\n\t\tif (daysToDayOfWeek < end - 7) {\r\n\t\t\tdaysToDayOfWeek += 7\r\n\t\t}\r\n\t\tadjustedMoment = hMoment(mom).add(daysToDayOfWeek, 'd')\r\n\t\treturn {\r\n\t\t\tweek: Math.ceil(adjustedMoment.iDayOfYear() / 7),\r\n\t\t\tyear: adjustedMoment.iYear()\r\n\t\t}\r\n\t}\r\n\r\n\t/************************************\r\n      Top Level Functions\r\n  ************************************/\r\n\r\n\tfunction makeMoment(input, format, lang, utc) {\r\n\t\tvar config =\r\n\t\t\t{ _i: input\r\n\t\t\t, _f: format\r\n\t\t\t, _l: lang\r\n\t\t\t}\r\n\t\t\t, date\r\n\t\t\t, m\r\n\t\t\t, hm\r\n\t\tif (format) {\r\n\t\t\tif (isArray(format)) {\r\n\t\t\t\treturn makeDateFromStringAndArray(config, utc)\r\n\t\t\t} else {\r\n\t\t\t\tdate = makeDateFromStringAndFormat(config)\r\n\t\t\t\tremoveParsedTokens(config)\r\n\t\t\t\tformat = 'YYYY-MM-DD-' + config._f\r\n\t\t\t\tinput = leftZeroFill(date[0], 4) + '-'\r\n\t\t\t\t\t+ leftZeroFill(date[1] + 1, 2) + '-'\r\n\t\t\t\t\t+ leftZeroFill(date[2], 2) + '-'\r\n\t\t\t\t\t+ config._i\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (utc)\r\n\t\t\tm = moment.utc(input, format, lang)\r\n\t\telse\r\n\t\t\tm = moment(input, format, lang)\r\n\t\tif (config._isValid === false)\r\n\t\t\tm._isValid = false\r\n\t\tm._hDiff = config._hDiff || 0\r\n\t\thm = objectCreate(hMoment.fn)\r\n\t\textend(hm, m)\r\n\t\treturn hm\r\n\t}\r\n\r\n\tfunction hMoment(input, format, lang) {\r\n\t\treturn makeMoment(input, format, lang, false)\r\n\t}\r\n\r\n\textend(hMoment, moment)\r\n\thMoment.fn = objectCreate(moment.fn)\r\n\r\n\thMoment.utc = function (input, format, lang) {\r\n\t\treturn makeMoment(input, format, lang, true)\r\n\t}\r\n\r\n\t/************************************\r\n      hMoment Prototype\r\n  ************************************/\r\n\r\n\thMoment.fn.format = function (format) {\r\n\t\tvar i, replace, me = this\r\n\r\n\t\tif (format) {\r\n\t\t\ti = 5\r\n\t\t\treplace = function (input) {\r\n\t\t\t\treturn me.localeData().longDateFormat(input) || input\r\n\t\t\t}\r\n\t\t\twhile (i > 0 && localFormattingTokens.test(format)) {\r\n\t\t\t\ti -= 1\r\n\t\t\t\tformat = format.replace(localFormattingTokens, replace)\r\n\t\t\t}\r\n\t\t\tif (!formatFunctions[format]) {\r\n\t\t\t\tformatFunctions[format] = makeFormatFunction(format)\r\n\t\t\t}\r\n\t\t\tformat = formatFunctions[format](this)\r\n\t\t}\r\n\t\treturn moment.fn.format.call(this, format)\r\n\t}\r\n\r\n\thMoment.fn.iYear = function (input) {\r\n\t\tvar lastDay, h, g\r\n\t\tif (typeof input === 'number') {\r\n\t\t\th = toHijri(this.year(), this.month(), this.date())\r\n\t\t\tlastDay = Math.min(h.hd, hMoment.iDaysInMonth(input, h.hm))\r\n\t\t\tg = toGregorian(input, h.hm, lastDay)\r\n\t\t\tsetDate(this, g.gy, g.gm, g.gd)\r\n\t\t\t//Workaround: sometimes moment wont set the date correctly if current day is the last in the month\r\n\t\t\tif (this.month() !== g.gm || this.date() !== g.gd || this.year() !== g.gy) {\r\n\t\t\t\tsetDate(this, g.gy, g.gm, g.gd)\r\n\t\t\t}\r\n\t\t\tmoment.updateOffset(this)\r\n\t\t\treturn this\r\n\t\t} else {\r\n\t\t\treturn toHijri(this.year(), this.month(), this.date()).hy\r\n\t\t}\r\n\t}\r\n\r\n\thMoment.fn.iMonth = function (input) {\r\n\t\tvar lastDay, h, g\r\n\t\tif (input != null) {\r\n\t\t\tif (typeof input === 'string') {\r\n\t\t\t\tinput = this.localeData().iMonthsParse(input)\r\n\t\t\t\tif(input >= 0) {\r\n\t\t\t\t\tinput -= 1\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn this\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\th = toHijri(this.year(), this.month(), this.date())\r\n\t\t\tlastDay = Math.min(h.hd, hMoment.iDaysInMonth(h.hy, input))\r\n\t\t\tthis.iYear(h.hy + div(input, 12))\r\n\t\t\tinput = mod(input, 12)\r\n\t\t\tif (input < 0) {\r\n\t\t\t\tinput += 12\r\n\t\t\t\tthis.iYear(this.iYear() - 1)\r\n\t\t\t}\r\n\t\t\tg = toGregorian(this.iYear(), input, lastDay)\r\n\t\t\tsetDate(this, g.gy, g.gm, g.gd)\r\n\t\t\t//Workaround: sometimes moment wont set the date correctly if current day is the last in the month\r\n\t\t\tif (this.month() !== g.gm || this.date() !== g.gd || this.year() !== g.gy) {\r\n\t\t\t\tsetDate(this, g.gy, g.gm, g.gd)\r\n\t\t\t}\r\n\t\t\tmoment.updateOffset(this)\r\n\t\t\treturn this\r\n\t\t} else {\r\n\t\t\treturn toHijri(this.year(), this.month(), this.date()).hm\r\n\t\t}\r\n\t}\r\n\r\n\thMoment.fn.iDate = function (input) {\r\n\t\tvar h, g\r\n\t\tif (typeof input === 'number') {\r\n\t\t\th = toHijri(this.year(), this.month(), this.date())\r\n\t\t\tg = toGregorian(h.hy, h.hm, input)\r\n\t\t\tsetDate(this, g.gy, g.gm, g.gd)\r\n\t\t\t//Workaround: sometimes moment wont set the date correctly if current day is the last in the month\r\n\t\t\tif (this.month() !== g.gm || this.date() !== g.gd || this.year() !== g.gy) {\r\n\t\t\t\tsetDate(this, g.gy, g.gm, g.gd)\r\n\t\t\t}\r\n\t\t\tmoment.updateOffset(this)\r\n\t\t\treturn this\r\n\t\t} else {\r\n\t\t\treturn toHijri(this.year(), this.month(), this.date()).hd\r\n\t\t}\r\n\t}\r\n\r\n\thMoment.fn.iDayOfYear = function (input) {\r\n\t\tvar dayOfYear = Math.round((hMoment(this).startOf('day') - hMoment(this).startOf('iYear')) / 864e5) + 1\r\n\t\treturn input == null ? dayOfYear : this.add(input - dayOfYear, 'd')\r\n\t}\r\n\r\n\thMoment.fn.iDaysInMonth = function () {\r\n\t\treturn parseInt(hMoment(this).endOf('iMonth').format('iDD'));\r\n\t}\r\n\r\n\thMoment.fn.iWeek = function (input) {\r\n\t\tvar week = iWeekOfYear(this, this.localeData()._week.dow, this.localeData()._week.doy).week\r\n\t\treturn input == null ? week : this.add( (input - week) * 7, 'd')\r\n\t}\r\n\r\n\thMoment.fn.iWeekYear = function (input) {\r\n\t\tvar year = iWeekOfYear(this, this.localeData()._week.dow, this.localeData()._week.doy).year\r\n\t\treturn input == null ? year : this.add(input - year, 'y')\r\n\t}\r\n\r\n\thMoment.fn.add = function (val, units) {\r\n\t\tvar temp\r\n\t\tif (units !== null && !isNaN(+units)) {\r\n\t\t\ttemp = val\r\n\t\t\tval = units\r\n\t\t\tunits = temp\r\n\t\t}\r\n\t\tunits = normalizeUnits(units)\r\n\t\tif (units === 'iyear') {\r\n\t\t\tthis.iYear(this.iYear() + val)\r\n\t\t} else if (units === 'imonth') {\r\n\t\t\tthis.iMonth(this.iMonth() + val)\r\n\t\t} else if (units === 'idate') {\r\n\t\t\tthis.iDate(this.iDate() + val)\r\n\t\t}\r\n\t\t else {\r\n\t\t\tmoment.fn.add.call(this, val, units)\r\n\t\t}\r\n\t\treturn this\r\n\t}\r\n\r\n\thMoment.fn.subtract = function (val, units) {\r\n\t\tvar temp\r\n\t\tif (units !== null && !isNaN(+units)) {\r\n\t\t\ttemp = val\r\n\t\t\tval = units\r\n\t\t\tunits = temp\r\n\t\t}\r\n\t\tunits = normalizeUnits(units)\r\n\t\tif (units === 'iyear') {\r\n\t\t\tthis.iYear(this.iYear() - val)\r\n\t\t} else if (units === 'imonth') {\r\n\t\t\tthis.iMonth(this.iMonth() - val)\r\n\t\t} else if (units === 'idate') {\r\n\t\t\tthis.iDate(this.iDate() - val)\r\n\t\t} else {\r\n\t\t\tmoment.fn.subtract.call(this, val, units)\r\n\t\t}\r\n\t\treturn this\r\n\t}\r\n\r\n\thMoment.fn.startOf = function (units) {\r\n\t\tunits = normalizeUnits(units)\r\n\t\tif (units === 'iyear' || units === 'imonth') {\r\n\t\t\tif (units === 'iyear') {\r\n\t\t\t\tthis.iMonth(0)\r\n\t\t\t}\r\n\t\t\tthis.iDate(1)\r\n\t\t\tthis.hours(0)\r\n\t\t\tthis.minutes(0)\r\n\t\t\tthis.seconds(0)\r\n\t\t\tthis.milliseconds(0)\r\n\t\t\treturn this\r\n\t\t} else {\r\n\t\t\treturn moment.fn.startOf.call(this, units)\r\n\t\t}\r\n\t}\r\n\r\n\thMoment.fn.endOf = function (units) {\r\n\t\tunits = normalizeUnits(units)\r\n\t\tif (units === undefined || units === 'milisecond') {\r\n\t\t\treturn this\r\n\t\t}\r\n\t\treturn this.startOf(units).add(1, (units === 'isoweek' ? 'week' : units)).subtract(1, 'milliseconds')\r\n\t}\r\n\r\n\thMoment.fn.clone = function () {\r\n\t\treturn hMoment(this)\r\n\t}\r\n\r\n\thMoment.fn.iYears = hMoment.fn.iYear\r\n\thMoment.fn.iMonths = hMoment.fn.iMonth\r\n\thMoment.fn.iDates = hMoment.fn.iDate\r\n\thMoment.fn.iWeeks = hMoment.fn.iWeek\r\n\r\n\t/************************************\r\n      hMoment Statics\r\n  ************************************/\r\n\r\n\thMoment.iDaysInMonth = function (year, month) {\r\n\t\tvar i = getNewMoonMJDNIndex(year, month + 1),\r\n\t\t\tdaysInMonth = ummalqura.ummalquraData[i] - ummalqura.ummalquraData[i - 1]\r\n\t\treturn daysInMonth\r\n\t}\r\n\r\n\tfunction toHijri(gy, gm, gd) {\r\n\t\tvar h = d2h(g2d(gy, gm + 1, gd))\r\n\t\th.hm -= 1\r\n\t\treturn h\r\n\t}\r\n\r\n\tfunction toGregorian(hy, hm, hd) {\r\n\t\tvar g = d2g(h2d(hy, hm + 1, hd))\r\n\t\tg.gm -= 1\r\n\t\treturn g\r\n\t}\r\n\r\n\thMoment.iConvert = {\r\n\t\ttoHijri: toHijri,\r\n\t\ttoGregorian: toGregorian\r\n\t}\r\n\r\n\treturn hMoment\r\n\r\n\t/************************************\r\n      Hijri Conversion\r\n  ************************************/\r\n\r\n\t/*\r\n    Utility helper functions.\r\n  */\r\n\r\n\tfunction div(a, b) {\r\n\t\treturn~~ (a / b)\r\n\t}\r\n\r\n\tfunction mod(a, b) {\r\n\t\treturn a - ~~(a / b) * b\r\n\t}\r\n\r\n\t/*\r\n    Converts a date of the Hijri calendar to the Julian Day number.\r\n\r\n    @param hy Hijri year (1356 to 1500)\r\n    @param hm Hijri month (1 to 12)\r\n    @param hd Hijri day (1 to 29/30)\r\n    @return Julian Day number\r\n  */\r\n\r\n\tfunction h2d(hy, hm, hd) {\r\n\t\tvar i = getNewMoonMJDNIndex(hy, hm),\r\n\t\t\tmjdn = hd + ummalqura.ummalquraData[i - 1] - 1,\r\n\t\t\tjdn = mjdn + 2400000;\r\n\t\treturn jdn\r\n\t}\r\n\r\n\t/*\r\n    Converts the Julian Day number to a date in the Hijri calendar.\r\n\r\n    @param jdn Julian Day number\r\n    @return\r\n      hy: Hijri year (1356 to 1500)\r\n      hm: Hijri month (1 to 12)\r\n      hd: Hijri day (1 to 29/30)\r\n  */\r\n\r\n\tfunction d2h(jdn) {\r\n\t\tvar mjdn = jdn - 2400000,\r\n\t\t\ti = getNewMoonMJDNIndexByJDN(mjdn),\r\n\t\t\ttotalMonths = i + 16260,\r\n\t\t\tcYears = Math.floor((totalMonths - 1) / 12),\r\n\t\t\thy = cYears + 1,\r\n\t\t\thm = totalMonths - 12 * cYears,\r\n\t\t\thd = mjdn - ummalqura.ummalquraData[i - 1] + 1\r\n\r\n\t\treturn {\r\n\t\t\thy: hy,\r\n\t\t\thm: hm,\r\n\t\t\thd: hd\r\n\t\t}\r\n\t}\r\n\r\n\t/*\r\n    Calculates the Julian Day number from Gregorian or Julian\r\n    calendar dates. This integer number corresponds to the noon of\r\n    the date (i.e. 12 hours of Universal Time).\r\n    The procedure was tested to be good since 1 March, -100100 (of both\r\n    calendars) up to a few million years into the future.\r\n\r\n    @param gy Calendar year (years BC numbered 0, -1, -2, ...)\r\n    @param gm Calendar month (1 to 12)\r\n    @param gd Calendar day of the month (1 to 28/29/30/31)\r\n    @return Julian Day number\r\n  */\r\n\r\n\tfunction g2d(gy, gm, gd) {\r\n\t\tvar d = div((gy + div(gm - 8, 6) + 100100) * 1461, 4) + div(153 * mod(gm + 9, 12) + 2, 5) + gd - 34840408\r\n\t\td = d - div(div(gy + 100100 + div(gm - 8, 6), 100) * 3, 4) + 752\r\n\t\treturn d\r\n\t}\r\n\r\n\t/*\r\n    Calculates Gregorian and Julian calendar dates from the Julian Day number\r\n    (hdn) for the period since jdn=-34839655 (i.e. the year -100100 of both\r\n    calendars) to some millions years ahead of the present.\r\n\r\n    @param jdn Julian Day number\r\n    @return\r\n      gy: Calendar year (years BC numbered 0, -1, -2, ...)\r\n      gm: Calendar month (1 to 12)\r\n      gd: Calendar day of the month M (1 to 28/29/30/31)\r\n  */\r\n\r\n\tfunction d2g(jdn) {\r\n\t\tvar j, i, gd, gm, gy\r\n\t\tj = 4 * jdn + 139361631\r\n\t\tj = j + div(div(4 * jdn + 183187720, 146097) * 3, 4) * 4 - 3908\r\n\t\ti = div(mod(j, 1461), 4) * 5 + 308\r\n\t\tgd = div(mod(i, 153), 5) + 1\r\n\t\tgm = mod(div(i, 153), 12) + 1\r\n\t\tgy = div(j, 1461) - 100100 + div(8 - gm, 6)\r\n\t\treturn {\r\n\t\t\tgy: gy,\r\n\t\t\tgm: gm,\r\n\t\t\tgd: gd\r\n\t\t}\r\n\t}\r\n\r\n\t/*\r\n    Returns the index of the modified Julian day number of the new moon\r\n    by the given year and month\r\n\r\n    @param hy: Hijri year (1356 to 1500)\r\n    @param hm: Hijri month (1 to 12)\r\n    @return\r\n        i: the index of the new moon in modified Julian day number.\r\n  */\r\n\tfunction getNewMoonMJDNIndex(hy, hm) {\r\n\t\tvar cYears = hy - 1,\r\n\t\t\ttotalMonths = (cYears * 12) + 1 + (hm - 1),\r\n\t\t\ti = totalMonths - 16260\r\n\t\treturn i\r\n\t}\r\n\r\n\t/*\r\n    Returns the nearest new moon\r\n\r\n    @param jdn Julian Day number\r\n    @return\r\n      i: the index of a modified Julian day number.\r\n  */\r\n\tfunction getNewMoonMJDNIndexByJDN(mjdn) {\r\n\t\tfor (var i = 0; i < ummalqura.ummalquraData.length; i=i+1) {\r\n\t\t\tif (ummalqura.ummalquraData[i] > mjdn)\r\n\t\t\t\treturn i\r\n\t\t}\r\n\t}\r\n\r\n});\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}